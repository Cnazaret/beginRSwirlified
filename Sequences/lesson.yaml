- Class: meta
  Course: R Programming E
  Lesson: Sequences
  Author: SANSEN Joris
  Type: Standard
  Organization: Bordeaux-INP / ENSTBB
  Version: 2.4.5

# Q1
- Class: text
  Output: Dans cette leçon, nous allons travailler avec les séquences de nombres.In this lesson, you'll learn how to create sequences of numbers in R.

# Q2
- Class: cmd_question
  Output: La façon la plus simple de créer une séquence de nombres dans R est en utilisant l'opérateur deux-points ":".
  Tapez "1:20" pour voir comment cela fonctionne.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Tapez 1:20 sans espaces ni parenthèses. Assurez-vous bien d'utiliser les deux-points et non le point-virgule.

# Q3
- Class: cmd_question
  Output: Cela nous donne tout les entiers [1:20] (depuis 1, jusquà 20 inclu). Nous pourrions également l'utiliser pour créer une séquence de nombres réels. Par exemple, essayez d'écrire pi:10.
  CorrectAnswer: pi:10
  AnswerTests: omnitest(correctExpr='pi:10')
  Hint: Entrez pi:10 et voyez le résultat. Pi est une constante pré-définie dans R qui prend en valeur 3.1415....

# Q4
- Class: text
  Output: Le résultat est un vecteur de nombres réels démarrant à pi (3.142...) et augmentant par incrément de 1.
La limite maximale de 10 n'est jamais atteinte puisque le nombre suivant de notre séquence par un incrément de 1 serait supérieur à 10.

# Q5
- Class: cmd_question
  Output: Que se passe-t-il si on tape "15:1"? Essayez pour le découvrir!'
  CorrectAnswer: '15:1'
  AnswerTests: omnitest(correctExpr='15:1')
  Hint: Tapez 15:1 et appuyez sur Entrée.

# Q6
- Class: text
  Output: Cela crée un vecteur qui décrémente de 15 à 1 (inclus) par pas de 1. Il est rare d'avoir besoin de ce type de comportement mais c'est toujours bon à savoir.

# Q7
- Class: text
  Output: "Rappelez vous qui si vous avez des questiosn à propos d'une fonction particulière dans R, vous pouvez accèdez à sa documentation en utilisant le point d'interrogation suivi du nom de la fonction. '?nomdefonction'.
  Cependant, dans le cas d'un opérateur, il faut encadrer le symbole dans des guillements, apostrophes ou "backticks" (apostrophe inversée généralement placée sur la touche 7, à côté du è, et donc accessible via alt-gr).
  Cela Donne donc: ?':'"

# Q8
- Class: cmd_question
  Output: Cherchez maintenant la documentation pour l'opérateur ':'.
  CorrectAnswer: ?':'
  AnswerTests: any_of_exprs('?`:`', "?':'", '?":"')
  Hint: "Pensez à encadrer l'opérateur, cela sert à "prévenir" R que l'on veut effecteur une recherche sur l'opérateur est non l'utiliser en tant qu'opérateur.
  Votre commande devrait donc ressembler à cela: "?':'"


# Q9
- Class: text
  Output: Souvent, on veut avoir plus de contrôle sur une séquence que l'on crée que ce que nous permet l'opérateur ':'.
  Dans ce cas, nous utiliseront la fonction seq().

# Q10
- Class: cmd_question
  Output: L'utilisation la plus simple de seq() fait exactement la même chose que l'opérateur ':'
  Tapez seq(1, 20) pour le constater.
  CorrectAnswer: seq(1, 20)
  AnswerTests: omnitest(correctExpr='seq(1, 20)')
  Hint: Tapez seq(1, 20) puis Entrée. L'espace après la virgule n'est pas nécessaire mais recommandé pour faciliter la lecture du code, il apparait ainsi moins sérré, moins "encombré"... plus aéré. Et rappelez vous, un code facile à lire, c'est un évaluateur plus heureux ;-)

# Q11
- Class: cmd_question
  Output: Cela vous donne le même résultat que la commande 1:20.
  Cependant, disons qu'au lieu d'un vecteur allant de 1 à 20, nous voulons obtenir un vecteur allant de 0 à 10 par incrément de 0.5 (notez l'écriture à l'anglaise avec le point comme séparateur de décimal, c'est important, la virgule n'étant pas utilisable comme séparateur vous devrez vous habituer à utiliser le point).
  Dans ce cas, vous utiliserez la commande seq(0, 10,  by=0.5). Essayez-la.
  CorrectAnswer: seq(0, 10, by=0.5)
  AnswerTests: omnitest(correctExpr='seq(0, 10, by=0.5)')
  Hint: Vous utilisez toujours la fonction seq() mais cette fois avec un argument supplémentaire qui indique que vous voulez utiliser un incrément de 0.5. Essayez seq(0, 10, by=0.5).

# Q12
- Class: cmd_question
  Output: Peut-être n'avez vous aucune idée de quel incrément vous avez besoin mais savez que vous voulez une liste de 30 nombres. Dans ce cas, seq(5, 10, length=30) fera très bien l'affaire. Essayez maintenant et conservez le résultat dans un variable que vous appellerez my_seq.
  CorrectAnswer: my_seq = seq(5, 10, length=30)
  AnswerTests: omnitest(correctExpr='my_seq <- seq(5, 10, length=30)')
  Hint: Vous utilisez la même fonction mais en changeant les arguments pour obtenir un résultat différent. assurez vous bien de stocker le résultat dans une variable my_seq, comme ceci:  my_seq = seq(5, 10, length=30).

# Q13
- Class: cmd_question
  Output: To confirm that my_seq has length 30, we can use the length() function.
    Try it now.
  CorrectAnswer: length(my_seq)
  AnswerTests: omnitest(correctExpr='length(my_seq)')
  Hint: Use length(my_seq) to view the length of the my_seq variable.

- Class: text
  Output: Let's pretend we don't know the length of my_seq, but we want to generate
    a sequence of integers from 1 to N, where N represents the length of the my_seq
    vector. In other words, we want a new vector (1, 2, 3, ...) that is the same length
    as my_seq.

- Class: cmd_question
  Output: 'There are several ways we could do this. One possibility is to combine
    the `:` operator and the length() function like this: 1:length(my_seq). Give that
    a try.'
  CorrectAnswer: 1:length(my_seq)
  AnswerTests: omnitest(correctExpr='1:length(my_seq)')
  Hint: Try 1:length(my_seq), without assigning the result to a new variable.

- Class: cmd_question
  Output: Another option is to use seq(along.with = my_seq). Give that a try.
  CorrectAnswer: seq(along.with = my_seq)
  AnswerTests: omnitest(correctExpr='seq(along.with = my_seq)')
  Hint: Type seq(along.with = my_seq). Notice we're using the same seq() function, but
    with a different argument called `along.with`. This tells R that you want a sequence
    'along with' the sequence my_seq. Remember you can type ?seq if you have questions
    about the seq() function.

- Class: cmd_question
  Output: However, as is the case with many common tasks, R has a separate built-in
    function for this purpose called seq_along(). Type seq_along(my_seq) to see it
    in action.
  CorrectAnswer: seq_along(my_seq)
  AnswerTests: omnitest(correctExpr='seq_along(my_seq)')
  Hint: The seq_along() function is a variation of the seq() function. Try seq_along(my_seq)
    to get the same result yet another way.

- Class: text
  Output: There are often several approaches to solving the same problem, particularly
    in R. Simple approaches that involve less typing are generally best. It's also
    important for your code to be readable, so that you and others can figure out
    what's going on without too much hassle.

- Class: text
  Output: If R has a built-in function for a particular task, it's likely that function
    is highly optimized for that purpose and is your best option. As you become a
    more advanced R programmer, you'll design your own functions to perform tasks
    when there are no better options. We'll explore writing your own functions in
    future lessons.

- Class: text
  Output: One more function related to creating sequences of numbers is rep(), which
    stands for 'replicate'. Let's look at a few uses.

- Class: cmd_question
  Output: If we're interested in creating a vector that contains 40 zeros, we can
    use rep(0, times = 40). Try it out.
  CorrectAnswer: rep(0, times = 40)
  AnswerTests: omnitest(correctExpr='rep(0, times = 40)')
  Hint: Type rep(0, times = 40) to make a vector containing 40 zeros.

- Class: cmd_question
  Output: If instead we want our vector to contain 10 repetitions of the vector (0,
    1, 2), we can do rep(c(0, 1, 2), times = 10). Go ahead.
  CorrectAnswer: rep(c(0, 1, 2), times = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), times = 10)')
  Hint: Try rep(c(0, 1, 2), times = 10) for a different variation on the same theme.
    Be sure to use the c() function to tell R that the numbers 0, 1, and 2 make up
    a vector.

- Class: cmd_question
  Output: Finally, let's say that rather than repeating the vector (0, 1, 2) over
    and over again, we want our vector to contain 10 zeros, then 10 ones, then 10
    twos. We can do this with the `each` argument. Try rep(c(0, 1, 2), each = 10).
  CorrectAnswer: rep(c(0, 1, 2), each = 10)
  AnswerTests: omnitest(correctExpr='rep(c(0, 1, 2), each = 10)')
  Hint: Type rep(c(0, 1, 2), each = 10) to see how the `each` argument to the rep()
    function alters its behavior slightly.

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
