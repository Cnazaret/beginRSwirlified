- Class: meta
  Course: beginR
  Lesson: Fonctions
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

# Q1
- Class: text
  Output: "Les fonctions font parties des éléments essentiels en programmation, y compris avec R. Elles permettent de définir de petits blocks de code ré-utilisable et pouvant être exploitée comme tout autre objet R."

# Q2
- Class: text
  Output: "Si vous avez effectué toutes les parties précédentes de ce module, il vous est déjà arrivé d'utiliser des fonctions, sans forcément très bien comprendre ce qu'elles étaient. Une fonction se caractérise par un nom suivi de parenthèses."

# Q3
- Class: cmd_question
  Output: "Essayons d'utiliser quelques fonctions basiques pour se faire la main. La fonction Sys.Date() retourne une chaine de caractères montrant la date du jour. Essayez cette commande pour la voir en action."
  CorrectAnswer: Sys.Date()
  AnswerTests: omnitest(correctExpr='Sys.Date()')
  Hint: "Affichez la date du jour en tapant: Sys.Date()"

# Q4
- Class: text
  Output: "La plupart des fonctions de R retourne une valeur. Les fonctions comme Sys.Date() retourne une valeur qui dépend de l'environnement d'exploitation de votre ordinateur (Windows, Mac, Linux, versions, etc) tandis que d'autres fonctions manipulent des données afin d'effectuer des calculs ou opérations et retourne une valeur."

# Q5
- Class: cmd_question
  Output: "La fonction mean() prend un vecteur en entrée et retourne la moyenne de tout les nombres présents dans le vecteur d'entrée. Les variables d'entrée d'une fonction sont généralement appelées des arguments. Pur fournir des arguments à une fonction (on peut également dire passer des arguments), on les indique dans la parenthèse de la fonction. Essayez de passer l'argument c(2, 4, 5) à la fonction mean()."
  CorrectAnswer: mean(c(2, 4, 5))
  AnswerTests: omnitest(correctExpr='mean(c(2, 4, 5))')
  Hint: "Calculez la moyenne de 2, 4, and 5 en tapant: mean(c(2, 4, 5))"

# Q6
- Class: text
  Output: "Les arguments passés à la fonction sont généralement des variables nécessaire aux opérations qu'effectue la fonction. Par exemple, la fonction mean() prend un vecteur en argument, comme vu dans l'exemple précédent mean(c(2,6,8)). La fonction moyenne additionne ensuite tout les nobmres de ce vecteur et divise cette somme par la taille du vecteur."

# Q7
- Class: text
  Output: "Dans les questions à venir, il vous sera demandé de modifier un script qui apparaitra dès que vous aurez passé cette question. Lorsque vous avez fini de modifier le script, sauvegardez vos changements et tapez submit() pour lancer l'évaluation du script. Le script qui va s'afficher contient des commentaires, assurez vous bien de les lire !"

# Q8
- Class: text
  Output: "Dans tout les cas, lors de l'appelle à une fonction, nous obtiendrons une valeur en réponse. Cette valeur est définie au sein de la fonction par deux mécanismes: -- soit elle est définie explicitement via la commande 'return(valeur à retourner)' -- soit elle est définie implicitement par la dernière variable évaluée dans la fonction"

# Q9
- Class: script
  Output: "Nous voulons écrire une fonction qui ne prenne qu'un argument, appelé x, et retournera cette variable x sans la modifier. Supprimez le dièse (symbole de commentaire en R, un commentaire servant à 'mettre de côté' la ligne, c'est-à-dire demander à R à ne pas interpréter ce code/texte). Assurez-vous de sauvegarder vos changements au script avant de taper submit()."
  AnswerTests: test_func1()
  Hint: "Assurez-vous de supprimer le symbole dièse (#) pour que la dernière expression de la fonction soit juste x."
  Script: boring_function.R

# Q10
- Class: cmd_question
  Output: "Maintenant que vous avez créé (disons plutôt édité) votre première fonction, testons la! Tapez: boring_function('Hello World !'). Si tout fonctionne correctement, la fonction devrait tout simplement vous retourner la chaine de caractère fournie en argument : 'Hello World !.'"
  CorrectAnswer: "boring_function('Hello World !')"
  AnswerTests: omnitest(correctExpr="boring_function('Hello World !')")
  Hint: "Testez votre fonction en tapant: boring_function('Hello World !')"

# Q11
- Class: text
  Output: "Félicitations pour votre première fonction! Que s'est-il passé? en appelant la fonction boring_function avec la commande 'boring_function('Hello World !')', R a en réalité compris la commande suivante: boring_function(x='Hello World !'). "
# Maintenant un peu d'imagination. Admettons que nous ayant une fonction qui calcule une addition de deux chiffres, il faut donc deux arguments à notre fonction."

#- Class: script
#  Output: "Créons cette fonction dans notre prochain script. Vous y verrez notamment deux lignes pré-fournies utilisant la fonction message qui permet d'afficher des message dans la console (nous verrons d'autres façon de faire cela ultérieurement, ne nous en préoccupez pas pour le moment). Ces deux lignes permettent notamment d'afficher la valeur attribuée à x et celle attribuée à y. Assurez-vous de sauvegarder vos changements au script avant de taper submit()."
#  AnswerTests: test_func_j()
#  Hint: "Additionnez simplement le premier argument et le deuxième argument."
#  Script: even_more_boring_function.R


# Q10
#- Class: cmd_question
#  Output: "Testons notre fonction en tapant : even_more_borign_function(2, 3)."
#  CorrectAnswer: "boring_function(2, 3)"
#  AnswerTests: omnitest(correctExpr="boring_function(1, 3)")
#  Hint: "Testez votre fonction en tapant: even_more_boring_function(2, 3)"

# Q11
#- Class: text
#  Output: "Que s'est-il passé ici? la variable x étant le premier argument défini pour notre fonction, il a pris la valeur du premier argument fournit lors de l'appel de la fonction (ici, 2) tandis que la variable y, deuxième argument défini pour notre function, a pris la valeur du deuxième argument défini lors de l'appel de la fonction (ici, 3). "


# Q12
#- Class: cmd_question
#  Output: "Cela nous permet de constater que les arguments indiqué dans l'appel de la fonction doivent suivre l'ordre des arguments indiqué lors de la déclaration fonction. Ainsi, la commande 'even_more_boring_function(3, 2)' impliquerait que x=3 et y=2. Vérifiez cela en tapant cette commande."
#  CorrectAnswer: even_more_boring_function(3, 2)
#  AnswerTests: omnitest(correctExpr='even_more_boring_function(3, 2)')
#  Hint: "Tapez: even_more_boring_function(3, 2)  pour voir les effets."

# Q11
#- Class: cmd_question
#  Output: "Il n'existe qu'une seule façon de ne pas respecter cet ordre, il faut pour cela effectuer un nommage explicite. Cela consiste à explicitement déclarer les arguments et les valeurs que l'on veut leurs donner lors de l'appel de la fonction. Ainsi, on pourrait écrire 'even_more_boring_function(y=3, x=2)'. Essayez cela."
#  CorrectAnswer: even_more_boring_function(y=3, x=2)
#  AnswerTests: omnitest(correctExpr='even_more_boring_function(y=3, x=2)')
#  Hint: "Tapez: even_more_boring_function(y=3, x=2) pour voir les effets."

# Q12
- Class: text
  Output: "En écrivant des fonctions, vous pouvez sérieusement améliorer votre compréhension du fonctionnement de R. Comme l'a un jour dit John Chambers, le créatoeur de R: \n\n Il y a deux choses utiles à savoir pour bien comprendre comment fonctionne les calculs dans R: 1. Tout ce qui existe dans R est un objet. 2. Tout ce qui se produit dans R est lié à un appel de fonction."

# Q13
- Class: cmd_question
  Output: "Si vous voulez voir le code source de n'importe quelle fonction, tapez simplement le nom de la fonction sans parenthèses ni argument. Essayons cela avec la fonction que vous venez d'éditer. Tapez 'boring_function' pour voir son code source."
  CorrectAnswer: boring_function
  AnswerTests: omnitest(correctExpr='boring_function')
  Hint: "Pour voir le code source d'une fonction il suffit de taper son nom. Tapez: boring_function pour le constater."

# Q14
- Class: text
  Output: "Bon, tout ça c'est bien mais il est temps de faire une fonction un peu plus utile que ça. Nous allons répliquer la fonction mean() en créant une fonction my_mean(). Rappelez-vous, elle calcule la moyenne des nombres d'un vecteur en calculant la somme de ces nombres et en divisant cette somme par la taille du vecteur (nombre d'élements dans le vecteur)."

# Q15
- Class: script
  Output: Assurez-vous de sauvegarder le script avant de taper submit().
  AnswerTests: test_func2()
  Hint: "Utilisez la fonction sum() pour trouver la somme des nombres d'un vecteur. Utilisez length() pour trouver la taille de ce vecteur."
  Script: my_mean.R

# Q16
- Class: cmd_question
  Output: "Maintenant testez votre fonction my_mean() pour trouver la moyenne du vecteur c(4, 5, 10)."
  CorrectAnswer: my_mean(c(4, 5, 10))
  AnswerTests: omnitest(correctExpr='my_mean(c(4, 5, 10))')
  Hint: "Executez my_mean(c(4, 5, 10)) pour tester votre nouvelle fonction."

# Q17
- Class: text
  Output: "Maintenant, esayons d'écrire une fonction avec des arguments par défaut. Un argument par défaut est une valeur fournie à la fonction si aucun argument ne vient remplacer cette valeur par defaut. On peut définir cette ou ces valeur-s lorsque l'on définit/crée/écrit la fonction en ajoutant '= valeur' à la variable pour laquelle on veut définir une valeur par défaut. C'est très utile pour paramétrer des fonctions avec des variables qui ne changeront que rarement."

# Q18
- Class: script
  Output: "Assurez-vous de sauvegarder le script avant de taper submit()."
  AnswerTests: test_func3()
  Hint: "Rappelez-vous de correctement définir la valeur par défaut !"
  Script: remainder.R

# Q19
- Class: cmd_question
  Output: "Faisons quelques tests avec cette fonction remainder qui calcul le reste d'une division entière. Executez la commande remainder(5) et constatez ce qu'il se passe."
  CorrectAnswer: remainder(5)
  AnswerTests: omnitest(correctExpr='remainder(5)')
  Hint: "Testez votre fonction remainder avec la commande: remainder(5)"

# Q20
- Class: text
  Output: "Prenons quelques instant pour examiner ce qu'il s'est passé. Vous avez passé un argument à la fonction, et R a fait coïncider cet argument a la variable 'num' puisque 'num' est le premier argument. L'argument 'divisor' n'ayant pas été fournit, R a utiisé la valeur par défaut qui avait été indiquée lors de la définition de la fonction, soit 2."

# Q21
- Class: cmd_question
  Output: "Maintenant, testons notre fonction remainder en apportant deux arguments cette fois-ci. Tapez: remainder(11, 5) et observons ce qu'il se produit."
  CorrectAnswer: remainder(11, 5)
  AnswerTests: omnitest(correctExpr='remainder(11, 5)')
  Hint: "testons notre fonction en tapant: remainder(11, 5)"

# Q22
- Class: text
  Output: "Une fois encore, les arguments ont été modifié en accord avec ce qu'on a fournit à l'appel de fonction."

# Q23
- Class: cmd_question
  Output: "Vous pouvez également expliciter les arguments d'une fonction lors de l'appel de fonction. En designant explicitement les arguments, vous pouvez vous permettre de ne pas respecter l'ordre (R utilisera les noms des variables plutôt que l'ordre des arguments pour faire la concordance) mais il est de bon usage d'essayer de le respecter lorsque c'est possible. Vous pouvez essayer cela en tapant: remainder(divisor = 11, num = 5)."
  CorrectAnswer: remainder(divisor = 11, num = 5)
  AnswerTests: omnitest(correctExpr='remainder(divisor = 11, num = 5)')
  Hint: "L'ordre n'a plus d'importance lorsque l'on nomme explicitement les arguments et les valeurs que l'on veut leurs attribuer. Testez cela en tapant: remainder(divisor = 11, num = 5)"

# Q24
- Class: text
  Output: "Comme vous pouvez le voir, il y a une nette différence entre remainder(11, 5) et remainder(divisor = 11, num = 5)."

# Q25
- Class: cmd_question
  Output: "R peut aussi partiellement faire la concordance. essayez de taper remainder(4, div = 2) pour constater cela."
  CorrectAnswer: remainder(4, div = 2)
  AnswerTests: omnitest(correctExpr='remainder(4, div = 2)')
  Hint: "Testez la concordance partielle en tapant la commande: remainder(4, div = 2)"

# Q26
- Class: text
  Output: "Un point de vigilance: en général on essaie d'écrire un code aussi claire et compréhensible que possible. Evitez de changer de 'convention' d'écriture en passant alternativement entre le nommage explicite et arguments ordonnés."

# Q27
- Class: cmd_question
  Output: "Avec toutes ces informations à propos des arguments, vous pouvez vous demander s'il y a une fonction permettant de connaitre les arguments d'une fonction (sans passer par la documentation). Fort heureusement, vous pouvez utiliser la fonction args() pour connaitre les arguments d'une fonction! Tapez: args(remainder) pour examiner les arguments de la fonction remainder."
  CorrectAnswer: args(remainder)
  AnswerTests: omnitest(correctExpr='args(remainder)')
  Hint: "Inspectez les arguments de la fonction remainder en tapant: args(remainder)"

# Q
- Class: text
  Output: "Vous ne vous en êtes probablement pas rendu compte mais je viens de vous attirer dans un piège fort intéressant! args() est une fonction, remainder() est une fonction, et pourtant, on a passé remainder en tant qu'argument à la fonction args(). Oui, c'est bien cela, on peut passer des fonctions en arguments! (Rappelez-vous, avec R, tout est objet!) C'est un concept très pratique !Ecrivons un script pour voir un peu mieux comment cela fonctionne."

# Q
- Class: script
  Output: Assurez-vous de sauvegarder votre script avant de lancer la commande submit().
  AnswerTests: test_func4()
  Hint: "Faites attention, lorsque vous passez une fonction en argument, à ne pas mettre les parenthèses avec mais uniquement le nom de la fonction !"
  Script: evaluate.R

# Q
- Class: cmd_question
  Output: "Amusons-nous un peu avec notre fonction evaluate(). Utilisez la fonction evaluate pour trouver l'écart-type du vecteur suivant: c(1.4, 3.6, 7.9, 8.8). Utilisez la fonction 'sd' pour calculer l'écart-type avec R."
  CorrectAnswer: evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
  AnswerTests: omnitest(correctExpr='evaluate(sd, c(1.4, 3.6, 7.9, 8.8))')
  Hint: "La fonction R pour calculer l'écart-type est sd(). Assurez-vous de ne passer que le nom de la fonction (sans parenthèses ni arguments) et de fournir le vecteur en second argument."

# Q
- Class: text
  Output: "Le principe de passer des fonctions en arguments d'autres fonctions est un concept fondamental en programmation."

# Q
- Class: text
  Output: "Vous pouvez être surpris d'apprendre que l'on peut passer une fonction (appelons la A) en argument à une autre fonction (B) sans quela fonction A ne soit défini en premier lieu. nsYou may be surprised to learn that you can pass a function as an
    argument without first defining the passed function. Functions that are not
    named are appropriately known as anonymous functions."

# Q
- Class: text
  Output: "Let's use the evaluate function to explore how anonymous functions
    work. For the first argument of the evaluate function we're going to write a
     tiny function that fits on one line. In the second argument we'll pass some
     data to the tiny anonymous function in the first argument."

# Q
- Class: cmd_question
  Output: "Type the following command and then we'll discuss how it works:
    evaluate(function(x){x+1}, 6)"
  CorrectAnswer: evaluate(function(x){x+1}, 6)
  AnswerTests: test_eval1()
  Hint: "Just type the command evaluate(function(x){x+1}, 6)"

# Q
- Class: text
  Output: "The first argument is a tiny anonymous function that takes one argument
  `x` and returns `x+1`. We passed the number 6 into this function so the entire
  expression evaluates to 7."

# Q
- Class: cmd_question
  Output: "Try using evaluate() along with an anonymous function to return the
    first element of the vector c(8, 4, 0). Your anonymous function should only
    take one argument which should be a variable `x`."
  CorrectAnswer: evaluate(function(x){x[1]}, c(8, 4, 0))
  AnswerTests: test_eval2()
  Hint: "You may need to recall how to index vector elements. Remember that your
    anonymous function should only have one argument, and that argument should
    be named `x`."

# Q
- Class: cmd_question
  Output: "Now try using evaluate() along with an anonymous function to return the
    last element of the vector c(8, 4, 0). Your anonymous function should only
    take one argument which should be a variable `x`."
  CorrectAnswer: evaluate(function(x){x[length(x)]}, c(8, 4, 0))
  AnswerTests: test_eval3()
  Hint: "You may need to recall how to index vector elements. Remember that your
    anonymous function should only have one argument, and that argument should
    be named `x`. Using the length() function in your anonymous function may
    help you."

# Q
- Class: cmd_question
  Output: "For the rest of the course we're going to use the paste() function
    frequently. Type ?paste so we can take a look at the documentation for the
    paste function."
  CorrectAnswer: ?paste
  AnswerTests: omnitest(correctExpr='?paste')
  Hint: "Just type: ?paste"

# Q
- Class: text
  Output: "As you can see the first argument of paste() is `...` which is referred
    to as an ellipsis or simply dot-dot-dot. The ellipsis allows an indefinite
    number of arguments to be passed into a function. In the case of paste() any
    number of strings can be passed as arguments and paste() will return all of
    the strings combined into one string."

# Q
- Class: cmd_question
  Output: 'Just to see how paste() works, type paste("Programming", "is", "fun!")'
  CorrectAnswer: paste("Programming", "is", "fun!")
  AnswerTests: omnitest(correctExpr='paste("Programming", "is", "fun!")')
  Hint: 'Just type: paste("Programming", "is", "fun!")'

# Q
- Class: text
  Output: "Time to write our own modified version of paste()."

# Q
- Class: script
  Output: Make sure to save your script before you type submit().
  AnswerTests: test_func5()
  Hint: "Remember that arguments can come after ..."
  Script: telegram.R

# Q
- Class: cmd_question
  Output: "Now let's test out your telegram function. Use your new telegram
    function passing in whatever arguments you wish!"
  CorrectAnswer: telegram()
  AnswerTests: expr_uses_func('telegram')
  Hint: 'Use the telegram function with whatever arguments you want to use.'

# Q
- Class: script
  Output: Make sure to save your script before you type submit().
  AnswerTests: test_func6()
  Hint: "Your function should have three sections: capture the ellipsis in a
    list(), unpack the arguments from the ellipsis and assign them to variables,
    then pass those variables to paste()."
  Script: mad_libs.R

# Q
- Class: cmd_question
  Output: "Time to use your mad_libs function. Make sure to name the place,
    adjective, and noun arguments in order for your function to work."
  CorrectAnswer: mad_libs(adjective = "", place = "", noun = "")
  AnswerTests: expr_uses_func('mad_libs')
  Hint: 'Use the mad_libs function and be sure to name place, adjective, and
  noun arguments.'

# Q
- Class: text
  Output: "We're coming to the end of this lesson, but there's still one more
    idea you should be made aware of."

# Q
- Class: text
  Output: "You're familiar with adding, subtracting, multiplying, and dividing
    numbers in R. To do this you use the +, -, *, and / symbols. These symbols
    are called binary operators because they take two inputs, an input from the
    left and an input from the right."

# Q
- Class: text
  Output: "In R you can define your own binary operators. In the next script
    I'll show you how."

# Q
- Class: script
  Output: Make sure to save your script before you type submit().
  AnswerTests: test_func7()
  Hint: "Remember: 'Hello' %p% 'student!' is how you use the binary operator."
  Script: bin_op.R

# Q
- Class: cmd_question
  Output: "You made your own binary operator! Let's test it out. Paste together
    the strings: 'I', 'love', 'R!' using your new binary operator."
  CorrectAnswer: "'I' %p% 'love' %p% 'R!'"
  AnswerTests: omnitest(correctExpr="'I' %p% 'love' %p% 'R!'")
  Hint: 'Use %p% in between each string.'

# Q
- Class: text
  Output: "We've come to the end of our lesson! Go out there and write some
    great functions!"

- Class: text
  Output: Sur Moodle, selectionnez le test "" et entrez le code "" (en conservant les majuscules et avec guillemets !) cela vous octroira le badge associé à cette leçon.
