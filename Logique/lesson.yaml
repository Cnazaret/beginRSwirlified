
- Class: meta
  Course: beginR
  Lesson: Logique
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

# Q1
- Class: text
  Output: "Ce cours est une courte introduction à l'utilisation des operateurs logiques dans R."

# Q2
- Class: text
  Output: "Il n'existe que deux valeurs logiques dans R (et tout autre langage), VRAI et FAUX (TRUE/FALSE) et on les appelle des booléens. On peut ainsi construire des expressions qui sont évalué en termes de vrai/faux."

# Q3
- Class: text
  Output: "Beaucoup de questions de ce cours impliqueront d'évaluer des expressions logiques. It il peut être utile d'ouvrir une deuxième session de R pour faire des essais en parallèle."

# Q4
- Class: text
  Output: Créer une expression logique nécessite d'utiliser un opérateur logique. Vous êtes familier des opérateurs arithmétiques (+, -, *, /), nous allons nou spencher un peu plus sur les opérateurs logiques (bien que vous en ayez déjà croisés certains dans des précédents cours).

# Q5
- Class: cmd_question
  Output: Le premier que nous allons aborder est l'opérateur d'égalité `==`. Utilisez cet operateur pour savoir si TRUE est égal à TRUE.
  CorrectAnswer: TRUE == TRUE
  AnswerTests: omnitest(correctExpr='TRUE == TRUE')
  Hint: Tapez TRUE == TRUE pour savoir si TRUE est égal à TRUE avec l'operateur d'égalité `==`

# Q6
- Class: text
  Output: Tout comme en arithmétique, les expressions logiques peuvent être groupées dans des parenthèses pour ordonner les expressions à évaluer. Ainsi (TRUE == TRUE) == TRUE donne TRUE.

# Q7
- Class: cmd_question
  Output: Pour tester cette propriété, évaluez (FALSE == TRUE) == FALSE .
  CorrectAnswer: (FALSE == TRUE) == FALSE
  AnswerTests: omnitest(correctExpr='(FALSE == TRUE) == FALSE')
  Hint: "Tapez: (FALSE == TRUE) == FALSE"

# Q8
- Class: cmd_question
  Output: "L'opérateur d'egalité peut également être utilisé pour comparer des nombres. Utilisez `==` pour évaluer si 6 est égal à 7."
  CorrectAnswer: 6 == 7
  AnswerTests: omnitest(correctExpr='6 == 7')
  Hint: "Utilisez l'opérateur d'égalité et tapez 6 == 7"

# Q9
- Class: text
  Output: "L'expression précédente retourne en toute logique FALSE puisque 6 est plus petit que 7. Heureusement, il existe également des opérateurs d'inégalité qui permettent de vérifier si une valeur est plus petite/grande qu'une autre."

# Q10
- Class: cmd_question
  Output: "L'opérateur `plus petit` `<` test si un nombre à gauche (left operand) est plus petit que le nombre de droite (right operand). Ecrivez une expression permetrant d'évaluer si 6 est plus petit que 7."
  CorrectAnswer: 6 < 7
  AnswerTests: omnitest(correctExpr='6 < 7')
  Hint: "Utilisez le symbole `<`(généralement à coté de maj sur les claviers francophones) et tapez 6 < 7"


# Q11
- Class: cmd_question
  Output: "On peut également tester `inférieur ou égal` via l'operateur `<=` qui, en toute logique, vérifie si la valeur de gauche est inférieure ou égale à celle de droite. Testez cette expression en vérifiant si 10 <= 10."
  CorrectAnswer: 10 <= 10
  AnswerTests: omnitest(correctExpr='10 <= 10')
  Hint: "Utilisez l'opérateur `<=` et tapez 10 <= 10"


# Q12
- Class: text
  Output: Nous ne l'expérimenterons pas içi mais gardez à l'esprit qu'il y a l'équivlanet `supérieur (ou égal) à`  `>` et `>=`.


# Q13
- Class: mult_question
  Output: 'Laquelle de ces expressions s'évalue à FALSE ?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 7; 6 < 8; 0 > -36
  AnswerTests: omnitest(correctVal='9 >= 10')
  Hint: 'Si besoin, n'hésitez pas à les tester dans une deuxième session R.'

# Q14
- Class: mult_question
  Output: 'Laquelle de ces expressions s'évalue à TRUE?'
  CorrectAnswer: 9 >= 10
  AnswerChoices: 9 >= 10; 7 == 9; 57 < 8; -6 > -7
  AnswerTests: omnitest(correctVal='-6 > -7')
  Hint: 'Si besoin, n'hésitez pas à les tester dans une deuxième session R.'

# Q15
- Class: cmd_question
  Output: "Le prochain opérateur dont nous allons discuter est l'opérateur diférent (non égal plus exactement), représenté par le symbole `!=`. Différent test si deux valeurs sont, je vous le donne en mille, différentes; ainsi, TRUE != FALSE retourne TRUE. Tout comme pour l'opérateur d'égalité,  `!=` peut aussi être utilisé avec des nombres. Essayez d'écrire une expression verifiant si 5 est différent de 7."
  CorrectAnswer: 5 != 7
  AnswerTests: omnitest(correctExpr='5 != 7')
  Hint: "Utilisez l'opérateur non égal et tapez 5 != 7"

# Q16
- Class: cmd_question
  Output: "On peut également utiliser le point d'exclamation (le `not`) pour négativer une expression booléenne. Ainsi, le `!` dans !TRUE (not TRUE) repond FALSE et !FALSE (not FALSE) répond TRUE. Essayez d'utiliser le `not` and l'opérateur d'egalité pour trouver la négation de 5 est égal à 7."
  CorrectAnswer: '!5 == 7'
  AnswerTests: any_of_exprs('!5 == 7', '!(5 == 7)')
  Hint: Cette expression peut sembler un peu tordue, penser à décomposer en différentes partie, ce que l'on teste (5 == 7) et ce que l'on veut négativer (le résultat de ce qui a été testé).

# Q17
- Class: text
  Output: "Prenons un moment pour analyser un peu ça: l'opérateur `==` test si les deux parties de gauche et droite sont bien égales, l'opérateur `!=` test la différence et l'operateur NOT (`!`) négative une expressison logique changeant ainsi un TRUE en FALSE et un FALSE en TRUE."

# Q18
- Class: mult_question
  Output: Laquelle de ces propositions retourne FALSE?
  CorrectAnswer: "!(0 >= -1)"
  AnswerChoices: "!(0 >= -1); !FALSE; 7 != 8; 9 < 10"
  AnswerTests: omnitest(correctVal='!(0 >= -1)')
  Hint: 'Si besoin, n'hésitez pas à les tester dans une deuxième session R.'


# Q19
- Class: mult_question
  Output: 'Selon-vous, que retournera cette expression ?: (TRUE != FALSE) == !(6 == 7)'
  CorrectAnswer: TRUE
  AnswerChoices: TRUE; FALSE; Peux-on vraiment obtenir une vérité objective en programmation?; %>%
  AnswerTests: omnitest(correctVal='TRUE')
  Hint: "Si vous avez des difficultés, essayez de décomposer et d'ordonner les expressions pour reconstruire le processus de réponse."


# Q20
- Class: text
  Output: "Au bout d'un moment, vous serez amené à evaluer les relations entre plusieurs expressions logiques. C'est là que les operateurs AND (et) et OR (ou) interviennent."

# Q21
- Class: cmd_question
  Output: "Tout d'abord, examinons comment fonctionne l'operateur AND. il existe deux operateur AND dans R, `&` et `&&`, tout deux fonctionne de façon similaire: si les expressions à gauche ET à droite sont vraies (TRUE) alors l'ensemble retournera TRUE, sinon on obtiendra FALSE. Il faut donc que les deux expressions soient vraies pour obtenir vrai (A ET B doivent être vraies pour que l'ensemble soit vrai). Ainsi TRUE & TRUE retournera TRUE. Essayez d'évaluer l'expression suivante: FALSE & FALSE pour voir ce qui est retourné."
  CorrectAnswer: FALSE & FALSE
  AnswerTests: omnitest(correctExpr='FALSE & FALSE')
  Hint: "Tapez FALSE & FALSE pour voir comment l'operateur AND fonctionne"


# Q22
- Class: cmd_question
  Output: "Vous pouvez utiliser l'opérateur `&` pour évaluer l'ensemble des valeurs d'un vecteur. l'opérateur `&&` n'évaluera que le premier élément d'un vecteur. Testons les deux pour les voir en action. Tapez l'expression TRUE & c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE & c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE & c(TRUE, FALSE, FALSE)')
  Hint: "Tapez simplement TRUE & c(TRUE, FALSE, FALSE) pour voir comment l'operateur & fonctionne"


# Q23
- Class: text
  Output: "Ce qu'il se passe ici est que la partie gauche de l'expression (avant le &) est recyclée pour chaque élément de la partie de droite. Cela revient à faire 'rep(TRUE, 3) & c(TRUE, FALSE, FALSE)'."

# Q24
- Class: cmd_question
  Output: "Maintenant nous allons utiliser la même expression mais avece cette fois-ci un double & (&&) comme operateur AND. Evaluez cette expression: TRUE && c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE && c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE && c(TRUE, FALSE, FALSE)')
  Hint: "comme vous allez le constater, && est une version un peu différente de l'opérateur AND. Tapez: TRUE && c(TRUE, FALSE, FALSE)"


# Q25
- Class: text
  Output: "Dans ce cas, la partie de gauche n'est évaluée qu'avec le premier élément de la partie de droite. Le reste du vecteur n'est pas testé par l'expression."

# Q26
- Class : text
  Output: L'operateur OR (ou) suit globalement les même règles que l'operatuer AND. il utilise le symbole `|` (pipe) pour évaluer l'ensemble d'un vecteur et `||` pour n'évaluer que le premier élément.

# Q27
- Class : text
  Output: "Une expression utilisant l'opérateur OR sera vraie dès lors qu'une des partie de gauche ou droite sera vraie; si toutes les deux sont vraies, il retournera vrai mais si aucune n'est vraie, il retournera alors faux. Il faut lire cet operateur comme 'au moins l'une des deux parties est vraie'."

# Q28
- Class: cmd_question
  Output: "testons la version vecteur de l'operateur OR. Evaluez l'expression suivante: TRUE | c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE | c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE | c(TRUE, FALSE, FALSE)')
  Hint: "Tapez: TRUE | c(TRUE, FALSE, FALSE) pour tester l'operateur OR sur un vecteur."

# Q29
- Class: cmd_question
  Output: "et maintenant la version non vectorisée TRUE || c(TRUE, FALSE, FALSE)."
  CorrectAnswer: "TRUE || c(TRUE, FALSE, FALSE)"
  AnswerTests: omnitest(correctExpr='TRUE || c(TRUE, FALSE, FALSE)')
  Hint: "Comme pour le AND, le double pipe permet d'empecher le recyclage d'expression. Testez le avec la commande TRUE || c(TRUE, FALSE, FALSE)"


# Q30
- Class : text
  Output: "Les opérateurs logiques peuvent être chainés, tout comme les opérateurs arithmétiques. Ainsi les expressions du genre `6 != 10 && FALSE && 1 >= 2` ou `TRUE || 5 < 9.3 || FALSE` n'ont rien d'exceptionnelles"


# Q31
- Class : cmd_question
  Output: "Si vous vous rappelez vos cours, les expression arithmétiques ont un ordre et des priorités. Il en est de même avec les expressions boléennes. Ainsi, les operateurs AND sont évalués avant les expressions OR s'ils ont le même niveau dans l'expression (hors priorisation par parenthèses). Exemple d'expression ambigue: Tapez 5 > 8 || 6 != 8 && 4 > 3.9"
  CorrectAnswer: "5 > 8 || 6 != 8 && 4 > 3.9"
  AnswerTests: omnitest(correctExpr='5 > 8 || 6 != 8 && 4 > 3.9')
  Hint: "Voyez comment l'ordre des opérations peut avoir un impact sur la réponse retournée en tapant: 5 > 8 || 6 != 8 && 4 > 3.9"

# Q32
- Class : text
  Output: "Let's walk through the order of operations in the above case. First the
    left and right operands of the AND operator are evaluated. 6 is not equal 8,
    4 is greater than 3.9, therefore both operands are TRUE so the resulting expression
    `TRUE && TRUE` evaluates to TRUE. Then the left operand of the OR operator is
    evaluated: 5 is not greater than 8 so the entire expression is reduced to FALSE
    || TRUE. Since the right operand of this expression is TRUE the entire expression
    evaluates to TRUE."


# Q
- Class: mult_question
  Output: Which one of the following expressions evaluates to TRUE?
  CorrectAnswer: "TRUE && FALSE || 9 >= 4 && 3 < 6"
  AnswerChoices: "TRUE && FALSE || 9 >= 4 && 3 < 6; TRUE && 62 < 62 && 44 >= 44; 99.99 > 100 || 45 < 7.3 || 4 != 4.0; FALSE || TRUE && FALSE"
  AnswerTests: omnitest(correctVal='TRUE && FALSE || 9 >= 4 && 3 < 6')
  Hint: 'Try to evaluate each expression in isolation and build up an answer.'


# Q
- Class: mult_question
  Output: Which one of the following expressions evaluates to FALSE?
  CorrectAnswer: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5"
  AnswerChoices: "FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5; FALSE || TRUE && 6 != 4 || 9 > 4; !(8 > 4) ||  5 == 5.0 && 7.8 >= 7.79; 6 >= -9 && !(6 > 7) && !(!TRUE)"
  AnswerTests: omnitest(correctVal='FALSE && 6 >= 6 || 7 >= 8 || 50 <= 49.5')
  Hint: 'Try to evaluate each expression in isolation and build up an answer.'


# Q
- Class : text
  Output: "Now that you're familiar with R's logical operators you can take advantage
    of a few functions that R provides for dealing with logical expressions."


# Q
- Class : cmd_question
  Output: "The function isTRUE() takes one argument. If that argument evaluates to
    TRUE, the function will return TRUE. Otherwise, the function will return FALSE.
    Try using this function by typing: isTRUE(6 > 4)"
  CorrectAnswer: "isTRUE(6 > 4)"
  AnswerTests: omnitest(correctExpr='isTRUE(6 > 4)')
  Hint: "Test out isTRUE() by typing: isTRUE(6 > 4)"


# Q
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "!isTRUE(4 < 3)"
  AnswerChoices: "isTRUE(!TRUE); isTRUE(3); isTRUE(NA); !isTRUE(4 < 3); !isTRUE(8 != 5)"
  AnswerTests: omnitest(correctVal='!isTRUE(4 < 3)')
  Hint: 'isTRUE() will only return TRUE if the statement passed to it as an argument is TRUE.'


# Q
- Class : cmd_question
  Output: "The function identical() will return TRUE if the two R objects passed to it as arguments
    are identical. Try out the identical() function by typing: identical('twins', 'twins')"
  CorrectAnswer: "identical('twins', 'twins')"
  AnswerTests: omnitest(correctExpr="identical('twins', 'twins')")
  Hint: "If you want to see if two R objects are identical, type: identical('twins', 'twins')"


# Q
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "identical(5 > 4, 3 < 3.1)"
  AnswerChoices: "identical(5 > 4, 3 < 3.1); identical(4, 3.1); identical('hello', 'Hello'); !identical(7, 7)"
  AnswerTests: omnitest(correctVal='identical(5 > 4, 3 < 3.1)')
  Hint: "identical() will only evaluate to TRUE if its arguments are exactly the same."


# Q
- Class : cmd_question
  Output: "You should also be aware of the xor() function, which takes two arguments.
  The xor() function stands for exclusive OR.
  If one argument evaluates to TRUE and one argument evaluates to FALSE, then this
  function will return TRUE, otherwise it will return FALSE. Try out the xor() function
  by typing: xor(5 == 6, !FALSE)"
  CorrectAnswer: "xor(5 == 6, !FALSE)"
  AnswerTests: omnitest(correctExpr='xor(5 == 6, !FALSE)')
  Hint: "Test out the xor() function by typing: xor(5 == 6, !FALSE)"


# Q
- Class : text
  Output: "5 == 6 evaluates to FALSE, !FALSE evaluates to TRUE, so xor(FALSE, TRUE)
    evaluates to TRUE. On the other hand if the first argument was changed to 5 == 5
    and the second argument was unchanged then both arguments would have been TRUE,
    so xor(TRUE, TRUE) would have evaluated to FALSE."


# Q
- Class: mult_question
  Output: Which of the following evaluates to FALSE?
  CorrectAnswer: "xor(4 >= 9, 8 != 8.0)"
  AnswerChoices: "xor(4 >= 9, 8 != 8.0); xor(!isTRUE(TRUE), 6 > -1); xor(identical(xor, 'xor'), 7 == 7.0); xor(!!TRUE, !!FALSE)"
  AnswerTests: omnitest(correctVal='xor(4 >= 9, 8 != 8.0)')
  Hint: "For xor() to evaluate to TRUE, one argument must be TRUE and one must be FALSE."


# Q
- Class : cmd_question
  Output: "For the next few questions, we're going to need to create a vector of
   integers called ints. Create this vector by typing: ints <- sample(10)"
  CorrectAnswer: "ints <- sample(10)"
  AnswerTests: omnitest(correctExpr='ints <- sample(10)')
  Hint: "To create a vector of ten integers without replacement type: ints <- sample(10)"


# Q
- Class : cmd_question
  Output: "Now simply display the contents of ints."
  CorrectAnswer: "ints"
  AnswerTests: omnitest(correctExpr='ints')
  Hint: "To view the vector type: ints"


# Q
- Class : cmd_question
  Output: "The vector `ints` is a random sampling of integers from 1 to 10 without
    replacement. Let's say we wanted to ask some logical questions about contents
    of ints. If we type ints > 5, we will get a logical vector corresponding to
    whether each element of ints is greater than 5. Try typing: ints > 5"
  CorrectAnswer: "ints > 5"
  AnswerTests: omnitest(correctExpr='ints > 5')
  Hint: "To see which elements of `ints` are larger than 5 type: ints > 5"


# Q
- Class : text
  Output: "We can use the resulting logical vector to ask other questions about ints.
    The which() function takes a logical vector as an argument and returns the indices
    of the vector that are TRUE. For example which(c(TRUE, FALSE, TRUE)) would return
    the vector c(1, 3)."


# Q
- Class : cmd_question
  Output: "Use the which() function to find the indices of ints that are greater
    than 7."
  CorrectAnswer: "which(ints > 7)"
  AnswerTests: omnitest(correctExpr='which(ints > 7)')
  Hint: "Use the which() function on the logical vector produced by: `ints > 7`"


# Q
- Class: mult_question
  Output: Which of the following commands would produce the indices of the elements in ints that
    are less than or equal to 2?
  CorrectAnswer: "which(ints <= 2)"
  AnswerChoices: "ints < 2; ints <= 2; which(ints < 2); which(ints <= 2)"
  AnswerTests: omnitest(correctVal='which(ints <= 2)')
  Hint: 'Use the which() function.'


# Q
- Class : text
  Output: "Like the which() function, the functions any() and all() take logical
    vectors as their argument. The any() function will return TRUE if one or more
    of the elements in the logical vector is TRUE. The all() function will return
    TRUE if every element in the logical vector is TRUE."


# Q
- Class : cmd_question
  Output: "Use the any() function to see if any of the elements of ints are less
    than zero."
  CorrectAnswer: "any(ints < 0)"
  AnswerTests: omnitest(correctExpr='any(ints < 0)')
  Hint: "Use the any() function on the logical vector produced by: `ints < 0`"


# Q
- Class : cmd_question
  Output: "Use the all() function to see if all of the elements of ints are greater
    than zero."
  CorrectAnswer: "all(ints > 0)"
  AnswerTests: omnitest(correctExpr='all(ints > 0)')
  Hint: "Use the all() function on the logical vector produced by: `ints > 0`"


# Q
- Class: mult_question
  Output: Which of the following evaluates to TRUE?
  CorrectAnswer: "any(ints == 10)"
  AnswerChoices: "any(ints == 10); all(ints == 10); all(c(TRUE, FALSE, TRUE)); any(ints == 2.5)"
  AnswerTests: omnitest(correctVal='any(ints == 10)')
  Hint: "any() will evaluate to TRUE if there is one or more TRUE elements in a logical vector."


# Q
- Class : text
  Output: "That's all for this introduction to logic in R. If you really want to see
    what you can do with logic, check out the control flow lesson!"


# Q
- Class: mult_question
  Output: Would you like to inform someone about your successful completion of
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
