- Class: meta
  Course: beginR
  Lesson: Lois_simulation
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

- Class: text
  Output: "Un des plus grands avantages d'utiliser un langage de programmation statistique tel que R est la grande collection d'outils pour simuler des nombres aléatoires."

- Class: text
  Output: "Ce cours assumera que vous êtes familier avec la plupart des lois de distributions usuelles, mais ces notions ne seront discutées que dans l'objectif de la génération de nombres aléatoires. Même si vous n'avez aucune notion des lois usuelles (ce dont je doute fort), vous devriez être en capacité de comprendre les idées principales qui seront vues ici."

- Class: cmd_question
  Output: "La première fonction que nous allons utiliser pour générer des nombres aléatoires est sample(). Afficher la documentation de cette fonction."
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: "Utilisez '?sample' pour afficher la documentation de la fonction sample()."

- Class: cmd_question
  Output: "Simulons le lancement de 4 dès à 6 faces: sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: "Tapez sample(1:6, 4, replace = TRUE) pour simuler le lancement de 4 dès à six faces."

- Class: cmd_question
  Output: "Miantenant répetez cette commande pour constater que les résutlats ont changés. La probabilité d'obtenir exactement le même résultat est de (1/6)^4 = 0,00077, donc bien que non nulle, ça serait un sacré coup de chance que d'avoir 2, si ce n'est 3 fois de suite le même tirage !"
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: "Tapez sample(1:6, 4, replace = TRUE) pour simuler à nouveau un lancement de 4 dès à 6 faces."

- Class: text
  Output: "sample(1:6, 4, replace=TRUE) indique à R de sélectionner aléatoirement 4 nombres dans l'interval [1,6] AVEC remise. Si vous vous rappelez vos cours du secondaire, vous savez sûrement qu'un tirage avec remise implique qu'un numero peut-être tiré plusieurs fois de suite (il est remis dans le lot des nombres utilisable), ce qui est le comportement recherché ici, puisque l'on veut simuler 4 dès différents et que le résultat sur un dès ne doit pas influencer le résultat sur les autres dès."

- Class: cmd_question
  Output: "Maintenant, tirer aléatoirement 10 nombres entre 1 et 20, cette fois-ci sans remise. A vous."
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: "Tapez tout simplement sample(1:20, 10) pour tirer aléatoirement 10 nombres entre 1 et 20, sans remise (la valeur par defaut de to replacement est déjà à FALSE)."

- Class: text
  Output: "Puisque la dernière commande est un tirage sans remise, aucun chiffre ne peut apparaitre plus d'une fois."

- Class: cmd_question
  Output: "LETTERS, que vous avez déjà rencontré dans un autre cours, est une varaible pré-définie contenant un vecteur avec les 26 lettres de l'alphabet anglais. Jetez-y un oeil dès mantenant."
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: "Tapez LETTERS pour afficher le contenu dans la console."

- Class: cmd_question
  Output: "La fonction sample() peut aussi être utilisé pour permuter, ou re-arranger les éléments d'un vecteur. Par exemple, la commande sample(LETTERS) permettra de permuter toutes les lettres du vecteur. A vous."
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: "Utilisez la commande sample(LETTERS) pour permutter les 26 lettres de l'alphabet anglais."

- Class: text
  Output: "Cela revient à effectuer un tirage aléatoire au sein de LETTERS, d'une taille 26 (la taille du vecteur), sans remise. Lorsque la taille n'est pas spécifié dans l'appel à la fonction sample, R prends simplement une taille de tirage identique à celle du vecteur dont les données sont tirées."

- Class: text
  Output: "Maintenant, supposons que nous cherchions à simuler 100 lancements d'une pièce à deux faces truquée. Cette pièce truquée a une probabilité de 0.3 de montrer le côté pile, et 0.7 de montrer le côté face."

- Class: cmd_question
  Output: "Imaginons que 0 représente le côté pile, 1 représente le côté face. Utilisez la fonction sample() pour tirer un échantillon de taille 100 du vecteur c(0,1) avec remise. Puisque la pièce est truquée, nous devons également définir les probabilités spécifique aux valeurs 0 (pile) et 1 (face). Pour cela, nous fournissons un quatrième argument: prob=c(0.3, 0.7). Testez cela et affectez le résultat à une ariable appelée flips."
  CorrectAnswer: flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: "La commande qui suit vous permettra de simuler 100 lancers d'une pièce truquée. flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))"

- Class: cmd_question
  Output: "Affichez le contenu de la variable flips."
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: "Tapez juste flips pour en voir le contenu."

- Class: cmd_question
  Output: Since we set the probability of landing heads on any given flip to be 0.7, we'd expect approximately 70 of our coin flips to have the value 1. Count the actual number of 1s contained in flips using the sum() function.
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: sum(flips) will add up all the 1s and 0s, giving you the total number of 1s in flips.

- Class: cmd_question
  Output: A coin flip is a binary outcome (0 or 1) and we are performing 100 independent trials (coin flips), so we can use rbinom() to simulate a binomial random variable. Pull up the documentation for rbinom() using ?rbinom.
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: Type ?rbinom to pull up the help file for rbinom().

- Class: text
  Output: Each probability distribution in R has an r*** function (for "random"), a d*** function (for "density"), a p*** (for "probability"), and q*** (for "quantile"). We are most interested in the r*** functions in this lesson, but I encourage you to explore the others on your own.

- Class: cmd_question
  Output: A binomial random variable represents the number of 'successes' (heads) in a given number of independent 'trials' (coin flips). Therefore, we can generate a single random variable that represents the number of heads in 100 flips of our unfair coin using rbinom(1, size = 100, prob = 0.7). Note that you only specify the probability of 'success' (heads) and NOT the probability of 'failure' (tails). Try it now.
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: Call rbinom() with n = 1, size = 100, and prob = 0.7.

- Class: cmd_question
  Output: Equivalently, if we want to see all of the 0s and 1s, we can request 100 observations, each of size 1, with success probability of 0.7. Give it a try, assigning the result to a new variable called flips2.
  CorrectAnswer: flips2 <- rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 <- rbinom(100, size = 1, prob = 0.7)')
  Hint: Call rbinom() with n = 100, size = 1, and prob = 0.7 and assign the result to flips2.

- Class: cmd_question
  Output: View the contents of flips2.
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: Type flips2 to view its contents.

- Class: cmd_question
  Output: Now use sum() to count the number of 1s (heads) in flips2. It should be close to 70!
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: Use sum(flips2) to count the number of 1s.

- Class: cmd_question
  Output: Similar to rbinom(), we can use R to simulate random numbers from many other probability distributions. Pull up the documentation for rnorm() now.
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: Type ?rnorm to view its help file.

- Class: cmd_question
  Output: The standard normal distribution has mean 0 and standard deviation 1. As you can see under the 'Usage' section in the documentation, the default values for the 'mean' and 'sd' arguments to rnorm() are 0 and 1, respectively. Thus, rnorm(10) will generate 10 random numbers from a standard normal distribution. Give it a try.
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: Use rnorm(10) to generate 10 random numbers from a standard normal distribution.

- Class: cmd_question
  Output: Now do the same, except with a mean of 100 and a standard deviation of 25.
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: Use rnorm(10, mean = 100, sd = 25) to generate 10 random numbers from a normal distribution with mean 100 and standard deviation 25.

- Class: text
  Output: Finally, what if we want to simulate 100 *groups* of random numbers, each containing 5 values generated from a Poisson distribution with mean 10? Let's start with one group of 5 numbers, then I'll show you how to repeat the operation 100 times in a convenient and compact way.

- Class: cmd_question
  Output: Generate 5 random values from a Poisson distribution with mean 10. Check out the documentation for rpois() if you need help.
  CorrectAnswer: rpois(5, 10)
  AnswerTests: match_call('rpois(5, 10)')
  Hint: Use rpois(5, 10) to generate 5 random numbers from a Poisson distribution with mean 10.

- Class: cmd_question
  Output: Now use replicate(100, rpois(5, 10)) to perform this operation 100 times. Store the result in a new variable called my_pois.
  CorrectAnswer: my_pois <- replicate(100, rpois(5, 10))
  AnswerTests: match_call('my_pois <- replicate(100, rpois(5, 10))')
  Hint: my_pois <- replicate(100, rpois(5, 10)) will repeat the operation 100 times and store the result.

- Class: cmd_question
  Output: Take a look at the contents of my_pois.
  CorrectAnswer: my_pois
  AnswerTests: omnitest('my_pois')
  Hint: Print the contents of my_pois to the console.

- Class: cmd_question
  Output: replicate() created a matrix, each column of which contains 5 random numbers generated from a Poisson distribution with mean 10. Now we can find the mean of each column in my_pois using the colMeans() function. Store the result in a variable called cm.
  CorrectAnswer: cm <- colMeans(my_pois)
  AnswerTests: omnitest('cm <- colMeans(my_pois)')
  Hint: Use cm <- colMeans(my_pois) to create a vector of column means, storing the result in cm.

- Class: cmd_question
  Output: And let's take a look at the distribution of our column means by plotting a histogram with hist(cm).
  CorrectAnswer: hist(cm)
  AnswerTests: omnitest('hist(cm)')
  Hint: hist(cm) will give you a histogram of column means.

- Class: text
  Output: Looks like our column means are almost normally distributed, right? That's the Central Limit Theorem at work, but that's a lesson for another day!

- Class: text
  Output: All of the standard probability distributions are built into R, including exponential (rexp()), chi-squared (rchisq()), gamma (rgamma()), .... Well, you see the pattern.

- Class: text
  Output: Simulation is practically a field of its own and we've only skimmed the surface of what's possible. I encourage you to explore these and other functions further on your own.
- Class: text
  Output: Sur Moodle, selectionnez le test "Logique" et entrez le code "MAUDOUX'sfr34k's" (en conservant les majuscules et avec guillemets !) cela vous octroira le badge associé à cette leçon.
