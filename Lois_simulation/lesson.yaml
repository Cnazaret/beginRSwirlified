- Class: meta
  Course: beginR
  Lesson: Lois_simulation
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

- Class: text
  Output: "Un des plus grands avantages d'utiliser un langage de programmation statistique tel que R est la grande collection d'outils pour simuler des nombres aléatoires."

- Class: text
  Output: "Ce cours assumera que vous êtes familier avec la plupart des lois de distributions usuelles, mais ces notions ne seront discutées que dans l'objectif de la génération de nombres aléatoires. Même si vous n'avez aucune notion des lois usuelles (ce dont je doute fort), vous devriez être en capacité de comprendre les idées principales qui seront vues ici."

- Class: cmd_question
  Output: "La première fonction que nous allons utiliser pour générer des nombres aléatoires est sample(). Afficher la documentation de cette fonction."
  CorrectAnswer: ?sample
  AnswerTests: omnitest(correctExpr='?sample')
  Hint: "Utilisez '?sample' pour afficher la documentation de la fonction sample()."

- Class: cmd_question
  Output: "Simulons le lancement de 4 dès à 6 faces: sample(1:6, 4, replace = TRUE)."
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: "Tapez sample(1:6, 4, replace = TRUE) pour simuler le lancement de 4 dès à six faces."

- Class: cmd_question
  Output: "Miantenant répetez cette commande pour constater que les résutlats ont changés. La probabilité d'obtenir exactement le même résultat est de (1/6)^4 = 0,00077, donc bien que non nulle, ça serait un sacré coup de chance que d'avoir 2, si ce n'est 3 fois de suite le même tirage !"
  CorrectAnswer: sample(1:6, 4, replace = TRUE)
  AnswerTests: match_call('sample(1:6, 4, replace = TRUE)')
  Hint: "Tapez sample(1:6, 4, replace = TRUE) pour simuler à nouveau un lancement de 4 dès à 6 faces."

- Class: text
  Output: "sample(1:6, 4, replace=TRUE) indique à R de sélectionner aléatoirement 4 nombres dans l'interval [1,6] AVEC remise. Si vous vous rappelez vos cours du secondaire, vous savez sûrement qu'un tirage avec remise implique qu'un numero peut-être tiré plusieurs fois de suite (il est remis dans le lot des nombres utilisable), ce qui est le comportement recherché ici, puisque l'on veut simuler 4 dès différents et que le résultat sur un dès ne doit pas influencer le résultat sur les autres dès."

- Class: cmd_question
  Output: "Maintenant, tirer aléatoirement 10 nombres entre 1 et 20, cette fois-ci sans remise. A vous."
  CorrectAnswer: sample(1:20, 10)
  AnswerTests: match_call('sample(1:20, 10)')
  Hint: "Tapez tout simplement sample(1:20, 10) pour tirer aléatoirement 10 nombres entre 1 et 20, sans remise (la valeur par defaut de to replacement est déjà à FALSE)."

- Class: text
  Output: "Puisque la dernière commande est un tirage sans remise, aucun chiffre ne peut apparaitre plus d'une fois."

- Class: cmd_question
  Output: "LETTERS, que vous avez déjà rencontré dans un autre cours, est une variable pré-définie contenant un vecteur avec les 26 lettres de l'alphabet anglais. Jetez-y un oeil dès mantenant."
  CorrectAnswer: LETTERS
  AnswerTests: omnitest(correctExpr='LETTERS')
  Hint: "Tapez LETTERS pour afficher le contenu dans la console."

- Class: cmd_question
  Output: "La fonction sample() peut aussi être utilisé pour permuter, ou re-arranger les éléments d'un vecteur. Par exemple, la commande sample(LETTERS) permettra de permuter toutes les lettres du vecteur. A vous."
  CorrectAnswer: sample(LETTERS)
  AnswerTests: omnitest(correctExpr='sample(LETTERS)')
  Hint: "Utilisez la commande sample(LETTERS) pour permutter les 26 lettres de l'alphabet anglais."

- Class: text
  Output: "Cela revient à effectuer un tirage aléatoire au sein de LETTERS, d'une taille 26 (la taille du vecteur), sans remise. Lorsque la taille n'est pas spécifié dans l'appel à la fonction sample, R prends simplement une taille de tirage identique à celle du vecteur dont les données sont tirées."

- Class: text
  Output: "Maintenant, supposons que nous cherchions à simuler 100 lancements d'une pièce à deux faces truquée. Cette pièce truquée a une probabilité de 0.3 de montrer le côté pile, et 0.7 de montrer le côté face."

- Class: cmd_question
  Output: "Imaginons que 0 représente le côté pile, 1 représente le côté face. Utilisez la fonction sample() pour tirer un échantillon de taille 100 du vecteur c(0,1) avec remise. Puisque la pièce est truquée, nous devons également définir les probabilités spécifique aux valeurs 0 (pile) et 1 (face). Pour cela, nous fournissons un quatrième argument: prob=c(0.3, 0.7). Testez cela et affectez le résultat à une ariable appelée flips."
  CorrectAnswer: flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
  AnswerTests: match_call('flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))')
  Hint: "La commande qui suit vous permettra de simuler 100 lancers d'une pièce truquée. flips = sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))"

- Class: cmd_question
  Output: "Affichez le contenu de la variable flips."
  CorrectAnswer: flips
  AnswerTests: omnitest(correctExpr='flips')
  Hint: "Tapez juste flips pour en voir le contenu."

- Class: cmd_question
  Output: "Puisque nous définissons la probabilité d'obtenir face pour n'importe quel lancer à 0.7, nous devrions obtenir approximativement 70 de nos valeurs à 1. Comptez le nombre réel de 1 contenu dans la variable flips en utilisant la fonction sum()."
  CorrectAnswer: sum(flips)
  AnswerTests: omnitest(correctExpr='sum(flips)')
  Hint: "sum(flips) additionnera tout les 1 et les 0, nous donnons, en toute logique, le nombre de 1 dans notre vecteur."
  
- Class: cmd_question
  Output: "Un lancer de piece fournit un résultat binaire (0 ou 1) et nous venons d'effectuer 100 essais indépendants (des lancer de dès), donc nous pourrions utiliser la fonction rbinom() pour simuler une variable aléatoire suivant la loi binomiale. Affichez la focumentation de la fonction rbinom."
  CorrectAnswer: ?rbinom
  AnswerTests: omnitest(correctExpr='?rbinom')
  Hint: "Tpez ?rbinom pour afficher la documentation de cette fonction."

- Class: text
  Output: "Chaque loi de distribution a une fonction r'something' (random 'quelque chose'), une fonction d'something' (pour density'something'), p'something' (pour probability) et q'something' (pour quantile). Dans ce cours, nous nous interesserons essentiellement aux fonctions random mais je vous encourage à expérimenter avec les autres de votre côté."
 
- Class: cmd_question
  Output: "Une variable aléatoire binomiale représentent le nombre de succès (face) lors de tirages aléatoires indépendants (les lancers de dès). Ainsi, nous pouvons générer une varaible aléatoire qui représente le nombre de face dans 100 lancers de notre pièce truquée en utilisant la commande rbinom(1, size=100, prob=0.7). Remarquez que nous n'avons besoin de spécifier que la probabilité des succès (face) et non pas la probabilité des échecs (pile). Essayez cela dès maintenant."
  CorrectAnswer: rbinom(1, size = 100, prob = 0.7)
  AnswerTests: match_call('rbinom(1, size = 100, prob = 0.7)')
  Hint: "Appelez la fonction rbinom() avec les paramètres n = 1, size = 100, et prob = 0.7."

- Class: cmd_question
  Output: "De façon similaire à ce qui a été fait précédemment, si l'on veut constater le respect des conditions de tirage, nous pouvons demander à obtenir 100 observations, chacune de taille 1, avec une probabilité de succès définie à 0.7. Essayez cela et stockez la réponse dans une variable appelée flips2."
  CorrectAnswer: flips2 = rbinom(100, size = 1, prob = 0.7)
  AnswerTests: match_call('flips2 = rbinom(100, size = 1, prob = 0.7)')
  Hint: "Appelez la fonction rbinom() avec les arguments suivants: n = 100, size = 1, et prob = 0.7 et affectez le résultat à une variable appelée flips2."

- Class: cmd_question
  Output: "Affichez le contenu de flips2."
  CorrectAnswer: flips2
  AnswerTests: omnitest('flips2')
  Hint: "Tapez flips2 pour en afficher le contenu."

- Class: cmd_question
  Output: "Maintenant, calculez la somme pour compter le nombre de 1 (côté pile) dans la variable flips2. Cela devrait être relativement proche de 70."
  CorrectAnswer: sum(flips2)
  AnswerTests: omnitest('sum(flips2)')
  Hint: "Utilisez la fonction sum() pour compter le nombre de 1 dans notre variable flips2."

- Class: cmd_question
  Output: "De daçon similaire à rbinom(), nous pouvons utiliser R pour simuler des nombres aléatoires suivant d'auters lois de distribution. Affichez la documentation de la fonction rnorm."
  CorrectAnswer: ?rnorm
  AnswerTests: omnitest('?rnorm')
  Hint: "Tapez ?rnorm pour en afficher la documentation."

- Class: cmd_question
  Output: "la distribution Normale standard a une moyenne à 0 et un écart-type de 1. Comme vous vpouvez le voir dans la section 'Usage' de la documentation, les valeurs par défaut pour les arguments mean et sd (standard deviation) sont à 0 et 1 respectivement. Ainsi, rnorm(10) générera un échntillon de 10 nombres aléatoires repsectant la loi de distribution Normale standard. Essayez-cela."
  CorrectAnswer: rnorm(10)
  AnswerTests: omnitest('rnorm(10)')
  Hint: "Utilisez rnorm(10) pour générer 10 nombres aléatoires tirés d'une distribution Normale standard."

- Class: cmd_question
  Output: "Maintenant, répetez l'opération avec une moyenne à 100 et un écart-type de 25."
  CorrectAnswer: rnorm(10, 100, 25)
  AnswerTests: match_call('rnorm(10, 100, 25)')
  Hint: "Utilisez la fonction rnorm(10, mean = 100, sd = 25) pour générer 10 nombres aléatoires, suivant une loi de distribution Normale ayant une moyenne de 100 et un écart-type de 25."

- Class: text
  Output: "Autre défi: comment faire pour simuler 100 groupes de nombres aléatoires, chacun contenant 5 valeurs générées à partir d'une distribution de Poisson ayant pour moyenne 10? Essayons déjà avec un groupe de 5 valeurs, puis nous verrons comment répeter l'opération 100 fois de façon simple et compacte."

- Class: cmd_question
  Output: "Génerez 5 nombres aléatoire issus d'une distribution de Poisson de moyenne 10. Regardez la documentation de la fonction rpois si cela s'avère nécessaire."
  CorrectAnswer: rpois(5, 10)
  AnswerTests: match_call('rpois(5, 10)')
  Hint: "Utilisez rpois(5, 10) pour génerer 5 nobmres aléatoires issus d'une distribution de Poisson de moyenne 10."

- Class: cmd_question
  Output: "Maintenant, utilisez la fonction replicate pour effectuer cette opération 100 fois. Stockez le résultat dans une nouvelle variable appelée my_pois."
  CorrectAnswer: my_pois = replicate(100, rpois(5, 10))
  AnswerTests: match_call('my_pois = replicate(100, rpois(5, 10))')
  Hint: "my_pois = replicate(100, rpois(5, 10)) vous permettra de repeter l'operation 100 fois et de stocker le résultat."

- Class: cmd_question
  Output: "Jetez maintenant un oeil au contenu de la variable my_pois."
  CorrectAnswer: my_pois
  AnswerTests: omnitest('my_pois')
  Hint: "Affichez le contenu de la variable my_pois."

- Class: cmd_question
  Output: "replicate() crée une matrice, chaque colonne représentant un vecteur de 5 nombres aléatoires tirés d'une distribution de Poisson de moyenne 10. Maintenant nous pouons calculer la moyenne de chaque colonne de my_pois en utilisant par exemple la fonction colMeans(). Stockez le résultat dans une variable appelée cm."
  CorrectAnswer: cm = colMeans(my_pois)
  AnswerTests: omnitest('cm = colMeans(my_pois)')
  Hint: "Utilisez cm = colMeans(my_pois) pour créer un vecteur 'cm' contenant les moyennes par colonne."

- Class: cmd_question
  Output: "Inspectons la distribution de nos moyennes en les représentant par un histogramme. Pour cela, utilisez la commande hist(cm)."
  CorrectAnswer: hist(cm)
  AnswerTests: omnitest('hist(cm)')
  Hint: "hist(cm) vous permettra d'afficher un histogramme des moyennes des colonnes."

- Class: text
  Output: "On dirait presque que nos moyennes suivent une loi Normale non? C'est la magie du théorème central limite, mais c'est une histoire que je vous conterai (peut-être) un autre jour !"

- Class: text
  Output: "Toutes les lois de distribution standard sont implémentées dans R, incluant la loi exponentielle (rexp()), chi-carré (rchisq()), gamma(rgamma()),... bref, vous devriez commencer à comprendre le schéma. "

- Class: text
  Output: "La simulation est tout un pan de la statistique et nous n'avons fait qu'effleurer la surface des possibilités qu'offre R dans ce domaine. Si cela vous intéresse, je ne peux que vous encourager à explorer un peu plus les fonctionnalités proposées par R dans ce domaine."

- Class: text
  Output: "Sur Moodle, selectionnez le test 'Lois_simulation' et entrez le code '1rs2nSc3ttC4rd' (en conservant les majuscules et avec guillemets !) cela vous octroira le badge associé à cette leçon."
