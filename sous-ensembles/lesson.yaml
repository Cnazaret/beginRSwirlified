- Class: meta
  Course: beginR
  Lesson: sous-ensembles
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5

# Q1
- Class: text
  Output: Dans ce cours, nous allons voir comment extraire des éléments d'un vecteur sur la base de conditions que nous allons spécifier.

# Q2
- Class: text
  Output: Par exemple, on peut ne s'intéresser qu'aux 20 premiers éléments d'un vecteur, ou aux éléments qui ne sont pas NA, ou seulement ceux qui sont des nombres positifs ou correspondant à une variable d'intérêt spécifique. D'ici la fin de ce cours, vous devriez être capable de prendre en charge ces différents cas de figures très fréquent en analyse de données.

# Q3
- Class: cmd_question
  Output: J'ai créé pour vous (voyez comme je suis gentil!) un vecteur appelé x qui contient 20 nombres aléatoires issus d'une distribution normale et 20 NAs. Tapez x dès maintenant pour voir à quoi il ressemble.
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Tapez x pour voir son contenu.

# Q4
- Class: text
  Output: La façon de dire à R que l'on veut selectionner certains éléments en particulier (on parle de créer un sous-ensemble - subset en anglais) à partir d'un vecteur est de placer un indice (position) entre crochets directement après le nom du vecteur.

# Q5
- Class: cmd_question
  Output: Exemple simple, essayez try x[1:10] pour voir les 10 premiers éléments de x.
  CorrectAnswer: x[1:10]
  AnswerTests: omnitest(correctExpr='x[1:10]')
  Hint: Affichez les 10 premiers éléments de x avec la commande x[1:10].

# Q6
- Class: text
  Output: Les indices de vecteurs peuvent être de différentes sortes: logiques, entiers, , vectors of positive integers, vectors of negative integers, and vectors of character strings -- each of which we'll cover in this lesson.

# Q7
- Class: text
  Output: Commençons avec les vecteurs logique. Un scenario classique lorsque l'on travaille avec des données réelles (issues de vraies expériences, acquises sur le terrain) est de vouloir extraire tout les éléments n'étant pas NA (retirer les données manquantes, on parle de nettoyage de données). Rappelez-vous que is.na(x) retourne un vecteur logique de la même taille que x, avec des TRUE aux positions des NA et des FALSE aux positions des non- NA dans x.

# Q8
- Class: mult_question
  Output: Que pensez-vous que x[is.na(x)] nous donnera ?
  AnswerChoices: Un vecteur entièrement rempli de NAs; un vecteur sans NAs; un vecteur de TRUE/FALSE; un vecteur de taille 0
  CorrectAnswer: Un vecteur entièrement rempli de NAs
  AnswerTests: omnitest(correctVal="Un vecteur entièrement rempli de NAs")
  Hint: Rappelez-vou que is.na(x) nous dit ou sont les NAs dans le vecteur. Si on échantillonne x sur cette base, à quoi dois-on s'attendre?

# Q9
- Class: cmd_question
  Output: Expérimentez le en tapant x[is.na(x)].
  CorrectAnswer: x[is.na(x)]
  AnswerTests: omnitest(correctExpr='x[is.na(x)]')
  Hint: Tapez x[is.na(x)] pour voir que l'on n'obtient que des NAs, ce qui n'est clairement pas ce que l'on veut.

# Q10
- Class: cmd_question
  Output: SOuvenez-vous que `!` nous permet d'obtenir la négation d'une expression logique. Ainsi, !is.na(x) peut se lire comme 'is not NA'. Du coup, si on veut créer un vecteur (appelons-le y) qui contiendrait toutes les valeurs non NA de x, on peut utiliser cette syntaxe: y = x[!is.na(x)]. Essayez cela.
  CorrectAnswer: y <- x[!is.na(x)]
  AnswerTests: omnitest(correctExpr='y <- x[!is.na(x)]')
  Hint: Tapez y = x[!is.na(x)] pour 'capturer'/récupérer tout les valeurs non manquantes de x.

# Q11
- Class: cmd_question
  Output: Affichez y.
  CorrectAnswer: 'y'
  AnswerTests: omnitest(correctExpr='y')
  Hint: Tapez y pour voir son contenu.

# Q12
- Class: text
  Output: Maintenant que nous avons isolé les valeurs non manquantes de x (stockées dans y), on peut échantillonner y comme on le souhaite.

# Q13
- Class: mult_question
  Output: Rappelez-vous que l'expression y > 0 nous donnera un vecteur de valeurs logique de la même taille que y, avec des TRUE ou FALSE pour chaque élément en fonction de la véracité de cette expression. Selon vous, que donnera y[y > 0]?
  AnswerChoices: Un vecteur de toutes les valeurs positives de y; un vecteur de toutes les valeurs négativs de y; un vecteur rempli de NA; un vecteur de taille 0; un vecteur de TRUE/FALSE
  CorrectAnswer: Un vecteur de toutes les valeurs positives de y
  AnswerTests: omnitest(correctVal="Un vecteur de toutes les valeurs positives de y")
  Hint: l'expression logique y > 0 nous donnera TRUE pour chaque éléments de y qui est positif. En partant de ce postulat, selon-vous, que donnera y[y > 0] ?

# Q14
- Class: cmd_question
  Output: Tapez y[y > 0] pour constater que l'on obtient les éléments positifs de y, qui sont par conséquent également les éléments positifs de notre vecteur d'origine x.
  CorrectAnswer: y[y > 0]
  AnswerTests: omnitest(correctExpr='y[y > 0]')
  Hint: Tapez y[y > 0] pour voir uniquement les éléments positifs de y.

# Q15
- Class: cmd_question
  Output: Il serait légitime de se demander pourquoi nous n'avons pas directement appliquer cette commande sur x, avec x[x > 0] pour isoler les éléments positifs de x. Essayez cette commande pour comprendre pourquoi.
  CorrectAnswer: x[x > 0]
  AnswerTests: omnitest(correctExpr='x[x > 0]')
  Hint: Tapez x[x > 0] pour voir pourquoi nous n'avons pas utilisé cette approche.

# Q16
- Class: text
  Output: Puisque NA n'est pas une valeur mais un espace reservé pour une quantité inconnue, l'expression NA > 0 retourne automatiquement NA. Par conséquent, on obtient un mélange de NA et de nos valeurs positives lorsque l'on fait cela.

# Q17
- Class: cmd_question
  Output: Si on s'appuie sur nos connaissances des opérateurs logiques et sur ce que l'on vient de voir sur l'échantillonnage, on peut faire cela: x[!is.na(x) & x > 0]. Essayez cette commande.
  CorrectAnswer: x[!is.na(x) & x > 0]
  AnswerTests: omnitest(correctExpr='x[!is.na(x) & x > 0]')
  Hint: Tapez x[!is.na(x) & x > 0] pour voir ce que l'on obtient.

# Q18
- Class: text
  Output: Dans ce cas, on ne subset que les valeurs qui sont à la fois non NA ET supérieures à zero.

# Q19
- Class: text
  Output: Nous avons déjà vu comment extraire (les 10 premiers éléments de x en utilisant x[1:10]. Dans ce cas, on fournit un vecteur d'entiers positifs entre les crochets, ce qui indique à R de ne retourner que les éléments de x aux positions 1 à 10.

# Q20
- Class: text
  Output: gardez en tête que dans R, le premier élément d'un vecteur/liste/etc est à 1 (one-based indexing) dans la plupart des autres langages informatique, le premier indice (la première position) est plutôt numérotée 0 (zero-based indexing).

# Q21
- Class: cmd_question
  Output: Pouvez-vous deviner comment faire pour obtenir les éléments en position 3, 5 et 7 ? (pour faciliter l'évaluation de votre réponse, ordonnez les indices par ordre croissant mais sachez que ce n'est pas obligatoire)
  CorrectAnswer: x[c(3, 5, 7)]
  AnswerTests: omnitest(correctExpr='x[c(3, 5, 7)]')
  Hint: créez un vecteur d'indices c(3, 5, 7), et utilisez le entre les crochets.

# Q22
- Class: cmd_question
  Output: Il est important de rester dans les bornes de positions existant au sein de notre vecteur, soit l'ensemble des indices {1, 2, ..., 40} puisque notre vecteur x est composé de 40 éléments. Que se passe-t-il lorsque nous demandons à obtenir l'élément en position zero ? essayez avec la commande x[0].
  CorrectAnswer: x[0]
  AnswerTests: omnitest(correctExpr='x[0]')
  Hint: Tapez x[0] pour voir ce qui se passe lorsque l'on fait référence à la position zéro du vecteur, ce qui n'est logiquement pas possible dans R.

# Q23
- Class: cmd_question
  Output: Comme vous vous doutiez, on n'obtient rien de très utile. Malheureusement, R ne nous empêche pas de faire ce type d'opérations. Que se passe-t-il si on essaie de dépasser les limites du vecteur et d'obtenir l'élément en position 3000 ? Essayez!
  CorrectAnswer: x[3000]
  AnswerTests: omnitest(correctExpr='x[3000]')
  Hint: Obtenez l'élement en position 3000 avec x[3000].

# Q24
- Class: text
  Output: Une fois encore, rien de très utile et R ne nous empêche pas d'effectuer ce type de requête. Ce sera à vous d'être vigilant à bien rester dans les limites du ou des vecteurs avec lesquels vous travaillez.

# Q25
- Class: text
  Output: Et maintenant, comment faire si on veut tout les éléments SAUF ceux en positions 2 et 10? Il serait plutôt compliqué de construire un vecteur contenant tout les nombre allant de 1 jusqu'à 40 excepté les nombres 2 et 10.

# Q26
- Class: cmd_question
  Output: Heureusement, R accepte les nombres négatifs comme indices de position. Là ou x[c(2, 10)] nous donne uniquement les éléments en position 2 et 10, x[c(-2, -10)] nous donnera tout les éléments excepté les éléments 2 et 10. Tapez x[c(-2, -10)] pour constater cela par vous-même.
  CorrectAnswer: x[c(-2, -10)]
  AnswerTests: omnitest(correctExpr='x[c(-2, -10)]')
  Hint: Tapez x[c(-2, -10)] pour en voir l'effet.

# Q27
- Class: cmd_question
  Output: Un raccourci très pratique pour spécifier plusieurs nombres comme étant négatifs (et donc à retirer de notre sélection) consiste à placer le signe `-` devant le vecteur des nombres positifs. Tapez x[-c(2, 10)] pour obtenir exactement le même résultat.
  CorrectAnswer: x[-c(2, 10)]
  AnswerTests: omnitest(correctExpr='x[-c(2, 10)]')
  Hint: Utilisez x[-c(2, 10)] pour simplifier l'écriture. Cela fait gagner un peu de temps lorsque l'on doit spécifier de nombreux nombres comme étant négatifs.

# Q28
- Class: text
  Output: Jusqu'à présent nous avons travailler avec trois types d'indices de position: logiques et les nombres entiers positifs et négatifs. Celui qui reste nécessite de vous présenter le concept d'éléments nommés (named elements).

# Q29
- Class: cmd_question
  Output: Créez un vecteur numérique avec 3 éléments nommés en utilisant cette commande: vect <- c(foo = 11, bar = 2, norf = NA).
  CorrectAnswer: vect <- c(foo = 11, bar = 2, norf = NA)
  AnswerTests: omnitest(correctExpr='vect <- c(foo = 11, bar = 2, norf = NA)')
  Hint: Créez un vector nommé avec vect <- c(foo = 11, bar = 2, norf = NA).

# Q30
- Class: cmd_question
  Output: lorsque l'on affiche ce vecteur, vous verrez que chaque élément à un nom. Vérifiez cela.
  CorrectAnswer: vect
  AnswerTests: omnitest(correctExpr='vect')
  Hint: Tapez vect pour voir son contenu.

# Q31
- Class: cmd_question
  Output: Nous pouvons également obtenir le nom du vecteur en passant le vecteur en argument à la fonction names(). Essayez cela.
  CorrectAnswer: names(vect)
  AnswerTests: omnitest(correctExpr='names(vect)')
  Hint: Vérifiez le résultat de names(vect).

# Q32
- Class: cmd_question
  Output: Alternatively, we can create an unnamed vector vect2 with c(11, 2, NA). Do that now.
  CorrectAnswer: vect2 <- c(11, 2, NA)
  AnswerTests: omnitest(correctExpr='vect2 <- c(11, 2, NA)')
  Hint: Create an ordinary (unnamed) vector called vect2 that contains c(11, 2, NA).

# Q33
- Class: cmd_question
  Output: Then, we can add the `names` attribute to vect2 after the fact with names(vect2) <- c("foo", "bar", "norf"). Go ahead.
  CorrectAnswer: names(vect2) <- c("foo", "bar", "norf")
  AnswerTests: omnitest(correctExpr='names(vect2) <- c("foo", "bar", "norf")')
  Hint: Add names to vect2 with names(vect2) <- c("foo", "bar", "norf").

# Q34
- Class: cmd_question
  Output: Now, let's check that vect and vect2 are the same by passing them as arguments to the identical() function.
  CorrectAnswer: identical(vect, vect2)
  AnswerTests: any_of_exprs('identical(vect, vect2)', 'identical(vect2, vect)')
  Hint: The identical() function tells us if its first two arguments are, well, identical.

# Q35
- Class: text
  Output: Indeed, vect and vect2 are identical named vectors.

# Q36
- Class: mult_question
  Output: Now, back to the matter of subsetting a vector by named elements. Which of the following commands do you think would give us the second element of vect?
  AnswerChoices: vect["bar"]; vect[bar]; vect["2"]
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctVal='vect["bar"]')
  Hint: If we want the element named "bar" (i.e. the second element of vect), which command would get us that?

- Class: cmd_question
  Output: Now, try it out.
  CorrectAnswer: vect["bar"]
  AnswerTests: omnitest(correctExpr='vect["bar"]')
  Hint: Try vect["bar"].

- Class: cmd_question
  Output: Likewise, we can specify a vector of names with vect[c("foo", "bar")]. Try it out.
  CorrectAnswer: vect[c("foo", "bar")]
  AnswerTests: omnitest(correctExpr='vect[c("foo", "bar")]')
  Hint: Use vect[c("foo", "bar")] to get only the elements of vect named "foo" and "bar".

- Class: text
  Output: Now you know all four methods of subsetting data from vectors. Different approaches are best in different scenarios and when in doubt, try it out!

- Class: mult_question
  Output: Would you like to inform someone about your successful completion of
    this lesson via email?
  CorrectAnswer: NULL
  AnswerChoices: Yes; No
  AnswerTests: notify()
  Hint: NULL
