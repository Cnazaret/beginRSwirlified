- Class: meta
  Course: beginR
  Lesson: Graphiques_basiques
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB
  Version: 2.4.5


- Class: text
  Output: "Une des forces de R, comparé à beaucoup d'autres langages de programmation, est la facilité avec laquelle on peut créer des graphiques de qualité. Dans ce cours, nous allons nous pencher sur les fonctionnalités graphiques de base."

- Class: text
  Output: "Nous ne couvrirons pas ici les parties plus avancées de la création graphique, tels que l'utilisation de lattice, ggplot2 ou ggvis, nous en verrons certaines dans un autre cours."

- Class: text
  Output: "Certaines 'écoles' (dans le sens école de pensée), estiment que cette approche --présentation des fonctionnalités de bases puis des techniques plus avancées-- va dans le contresens de la logique et que nous devrions commençer par apprendre le fonctionnement et les concepts de la bibliothèque ggplot2. Vous pouvez vous réferer à cet article pour voir pourquoi: http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for an outline of this view."

- Class: cmd_question
  Output: "Chargez les données cars via la commande data(cars). La commande data() permet de charger des données pré-chargées dans R, soit de base, soit via une bibliothèue importée."
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: "Tapez data(cars) pour charger les données."

- Class: text
  Output: "Pour cette initiation, nous allons travailler avec des données simples, stockées dans un dataframe. L'objectif est de vous présenter les techniques de représentation disponibles, pas nécessairement d'effectuer une analyse intéressante et poussée des données."

- Class: cmd_question
  Output: "Affichez la page de documentation de cars."
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)', 'help("cars")')
  Hint: "Tapez ?cars ou help(cars) pour afficher la page de documentation des données cars. "

- Class: text
  Output: "Comme vous pouvez le voir, les données cars n'ont que deux variables: speed et stopping distance (vitesse et distance d'arrêt). Vous remarquerez que les données datent des années 20 (1920)."

- Class: cmd_question
  Output: "Affichez les premieres lignes des données."
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: "Un trou de mémoire? utilisez la fonction head pour affichez les 6 premières lignes."

- Class: text
  Output: "Avant d'afficher un graphique (en anglais on dit 'to plot') il est, comme pour tout début d'analyse (voir le cours Data_first_encounter)  il est recommandé de se renseigner un minimum sur nos données via les commandes  dim(), names(), head(), tail(), str() and summary().i Pour le moment, on va se contenter de str ou de summary. A vous."
  CorrectAnswer: summary(cars)
  AnswerTests: any_of_exprs('summary(cars)','str(cars)')
  Hint: "Tapez summary(cars) ou str(cars) pour afficher la page de documentation des données cars. "

- Class: cmd_question
  Output: "Ok, démarrons le vif du sujet: utilisez la commande plto() sur les données cars."
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: "Tapez plot(cars) pour créer un graphique de cars."

- Class: text
  Output: "Comme toujours, R essaie toujours de vous donner quelque chose d'adapté en fonction des informations qu'on lui fourni. En premier lieu, R à analyser le format des données, un dataframe avec deux varaibles, il a donc 'supposé' que l'on voulait représenter une variable en fonction de la seconde."

- Class: text
  Output: "En second lieu, puisque nous n'avons pas indiqué d'étiquettes pour les axes, R à choisi d'utiliser les noms de colonnes. Ensuite, il a créer les graduations (ticks en anglais) en essayant de les faire correspondre à la fois aux données tout en étant simple à lire (il n'y a pas d'intérêt à avoir des graduations au dixième près...) Enfin, il utilise les arguments par défaut fournit par la commande plot()."

- Class: text
  Output: "Nous allons maintenant tenter d'eplxorer les possibilités offertes par plot. Retenez cependant que beaucoup des sujets abordés s'appliquent généralement aussi aux autres fonctions de représentation. Tout d'abord, notez que 'plot' vient de scatterplot (nuage de points en français)."

- Class: cmd_question
  Output: "Regardez la page de documentation de la fonction plot."
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: "Tapez ?plot ou help(plot) pour afficher la documentation de la fonction."

- Class: text
  Output: "La page de documentation met en avant les différents arguments que la fonction peut prendre. les deux plus important, en toute logiques, sont x et y, les variables que nous allons observer. Pour les prochaines questions, nommez explicitement les arguments utilisés dans votre réponse. Ainsi, ne tapez pas plot(cars$speed, cars$dist), même si cela marcherait, mais tapez plutôt plot(x = cars$speed, y = cars$dist)."

- Class: cmd_question
  Output: "Utilisez plot() pour afficher la vitesse sur l'axe des abscisses (x) et la distance sur l'axe des ordonnées (Y). N'oubliez pas de préciser explicitement les arguments fournis."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist)
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist)')
  Hint: "Tapez plot(x = cars$speed, y = cars$dist) pour créer le graphique."

- Class: text
  Output: "Remarqez que cela produit un graphique léèrement différent que celui obtenu par la commande plot(cars). Dans ce cas, R n'est pas sûr de ce que l'on veut utiliser comme étiquettes d'axe, donc il prend le nom de la variable à la place, dataframe et $ inclus."

- Class: text
  Output: "Dans R, il y a régulièrement deux méthodes d'utilisation des fonctions qui sont utilisables: la convention 'formula' et la convention 'S3'. La méthode S3 est celle utilisée auparavant, où l'on fournit une variable x et une variable y. La convention formula quant à elle utilise une écriture tirée des mathématiques, sous la forme Y en fonction de  X, qui se code y ~ x (et on indique les données dont sont tirés x et y avec l'argument data), mais nous l'utiliserons un peu plus tard dans le cours."

- Class: cmd_question
  Output: "Utilisez la commande plot() pour aficher la distance sur l'axe des abscisses et la vitesse sur les ordonnées (inversion du graphique précédent)."
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: "Tapez plot(x = cars$dist, y = cars$speed) pour créer le graphique"

- Class: text
  Output: "Il est probablement plus logique que la vitesse soit représentée en abscisse puisque la distance d'arrêt est, en toute logique, dépendante de la vitesse (en tout cas l'inverse serait pour le moins étonnant). Pour la suite, nous conserverons cette affectation."

- Class: text
  Output: "Par conséquent, on peut d'ores et déjà affirmer que les réponses aux prochaines questions seront sous la forme plot(x = cars$speed, y = cars$dist, ...) et que ce sont les trois-points qui seront modifiés (nouveaux arguments fournis pour modifier le graphique)."

- Class: cmd_question
  Output: "Recréez ce graphique en définissant l'étiquette des abscisses à la valeur 'Speed')."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = 'Speed')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, xlab = 'Speed')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, xlab = 'Speed') pour créer le graphqiue."

- Class: cmd_question
  Output: "Recréez un graphqiue avec l'étiquette 'Stopping Distance' sur l'axe des ordonnées. (sans étiquette en abscisse)."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance') pour créer le graphique."

- Class: cmd_question
  Output: "Recréez ce graphique avec, cette fois-ci, les deux étiquettes 'Speed' et 'Stopping Distance'."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')."

- Class: text
  Output: "La raison pour laquelle l'appel plot(cars) au début du cours a fonctionné est que R est suffisamment 'intelligent' pour savoir que la première colonne est à affecter à l'abscisse, et la seconde à l'ordonnée (il respecte l'ordre des arguments fournis dans la définition de la fonction). Dans la suite, nous utiliserons la commande plot(cars, ...) en faisant varier les arguments."

- Class: text
  Output: "Pour chaque question, nous utiliserons les arguments un à un mais dans une application réelle ils sont evidemment cumulables."

- Class: cmd_question
  Output: "Affichez cars avec un titre principal défini à 'My Plot'. Remarquez que l'argument s'appelle 'main' et non pas 'title'."
  CorrectAnswer: plot(cars, main = 'My Plot')
  AnswerTests: omnitest(correctExpr="plot(cars, main = 'My Plot')")
  Hint: "Tapez plot(cars, main = 'My Plot') pour recréer le graphique."

- Class: cmd_question
  Output: "Affichez le graphqiue de cars avec un sous-titre 'My Plot Subtitle'."
  CorrectAnswer: plot(cars, sub = 'My Plot Subtitle')
  AnswerTests: omnitest(correctExpr="plot(cars, sub = 'My Plot Subtitle')")
  Hint: "Tapez plot(cars, sub = 'My Plot Subtitle') pour créer le graphique."

- Class: text
  Output: "La documenttation de plot (?plot) ne couvre qu'une petite partie d'un grands nombre d'arguments utilisable. Nous allons en explorer quelques uns. Commençons avec ?par. Pour la suite on continuera avec la commande plot(cars, ...)."

- Class: cmd_question
  Output: "Representez cars afin que les points soit colorés en rouge. (Utilisez l'argument col=2) pour faire cela."
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: "Tapez plot(cars, col = 2) pour créer le graphique."

- Class: cmd_question
  Output: "Affichez cars en limitant l'axe des abscisses aux valeurs comprises entre 10 et 15. Pour cela utilisez l'argument xlim."
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: "Tapez plot(cars, xlim = c(10, 15)) pour obtenir le graphique."

- Class: text
  Output: "Vous pouvez également changer la forme des points dans le graphique. tapez ?points pour avoir un peu plus de précision à ce sujet."

- Class: cmd_question
  Output: "Affichez les données cars en utilisant des triangles comme points de données."
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: "Tapez plot(cars, pch = 2) pour créer le graphique adequat."

- Class: text
  Output: "les arguments comme 'col' et 'pch' peuvent sembler peu intuitifs... et c'est bel et bien le cas! C'est bien pour ça que des bibliothèques telles que ggplot2 ont été créées."

- Class: text
  Output: "Cependan, l'objectif ici est de travailler sur les graphiques de bases car beaucoup des mécanismes utilisés dans lattice ou gplot2 héritent de ceux mis en place dans base."

- Class: text
  Output: "Maintenant, penchons nous sur d'autres fonctions qui peuvent s'avérer utiles, notamment les boxplots ! "

- Class: cmd_question
  Output: "Maintenant,chargez les données mtcars en utilisant la fonction data."
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: "Tapez data(mtcars) pour charger de nouvelles données."

- Class: text
  Output: "Je vous l'ai déjà dit à plusieurs reprises, à chaqu fois que vous chargez des données, une bonne pratique de les explorer un peu avant de les analyser. Au cours d'une leçon swirl, tapez juste play() pour la mettre en pause et vous 'amuser un peu' avec la console classique pour observer un peu les données, puis tapez nxt() pour reprendre le cours là où vous l'aviez pausé."

- Class: cmd_question
  Output: "Maintenant, inspectez la page de documentation de la fonction boxplot()."
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: "Tapez ?boxplot pour afficher la documentation de cette fonction."

- Class: text
  Output: "PLutôt que de fournir directement les colonnes des données en arguments, comme nous l'avons fait avec plot(), il est souvent pratique de directement fournir le dataframe. C'est ce que permet l'argument data des fonctions de création de graphique."

- Class: text
  Output: "boxplot(), comme beaucoup de fonctions de R, accepte également les formula en argument. Elles s'écrivent sous la forme y ~ x (le tilde '~' se trouve généralement sous la touche 2 et on y accède avec alt-gr., qui se lit y en fonction de x."

- Class: cmd_question
  Output: "Utilisez la fonction boxplot() avec l'argument 'formula=mpg ~ cyl' et 'data=mtcars' pour créer un boxplot."
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: "Tapez boxplot(formula = mpg ~ cyl, data = mtcars) pour créer le graphique."

- Class: text
  Output: "le graphique montre que les mpg (miles per gallon -- équivalent en mesures impériales des kms/litres --) sont bien plus bas pour les voitures avec plus de cylindres. Remarquez que l'on pourrait ajouter les même lots d'arguments que précédemment (etiquettes d'axes, titres etc)."

- Class: text
  Output: "lorsque l'on inspecte une seule variable, ce sont les histogrammes qui sont généralement recommandé. hist() est la fonction R pour créer ce type de représentation. Tout comme plot(), hist() peut s'utiliser en lui fournissant directement un vecteur numérique."

- Class: cmd_question
  Output: "Utilisez hist avec le vectuer mtcars$mpg pour créer un histogramme."
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: "Tapez hist(mtcars$mpg) pour créer l'histogramme."

# Not sure what a good lesson length is for this.
# Might add some information on saving plots.
# Other functions that I use include identify().


- Class: text
  Output: "Sur Moodle, selectionnez le test 'Graphiques_basiques' et entrez le code 'T3mudJ1N' (en conservant les majuscules et sans guillemets !) cela vous octroira le badge associé à cette leçon."
