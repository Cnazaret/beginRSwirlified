- Class: meta
  Course: beginR
  Lesson: Graphiques_basiques
  Author: Joris SANSEN
  Type: Standard
  Organization: Bordeaux INP / ENSTBB 
  Version: 2.4.5


- Class: text
  Output: "Une des forces de R, comparé à beaucoup d'autres langages de programmation, est la facilité avec laquelle on peut créer des graphiques de qualité. Dans ce cours, nous allons nous pencher sur les fonctionnalités graphiques de base."

- Class: text
  Output: "Nous ne couvrirons pas ici les parties plus avancées de la création graphique, tels que l'utilisation de lattice, ggplot2 ou ggvis, nous en verrons certaines dans un autre cours."

- Class: text
  Output: "Certaines 'écoles' (dans le sens école de pensée), estiment que cette approche --présentation des fonctionnalités de bases puis des techniques plus avancées-- va dans le contresens de la logique et que nous devrions commençer par apprendre le fonctionnement et les concepts de la bibliothèque ggplot2. Vous pouvez vous réferer à cet article pour voir pourquoi: http://varianceexplained.org/r/teach_ggplot2_to_beginners/ for an outline of this view."

- Class: cmd_question
  Output: "Chargez les données cars via la commande data(cars). La commande data() permet de charger des données pré-chargées dans R, soit de base, soit via une bibliothèue importée."
  CorrectAnswer: data(cars)
  AnswerTests: omnitest(correctExpr='data(cars)')
  Hint: "Tapez data(cars) pour charger les données."

- Class: text
  Output: "Pour cette initiation, nous allons travailler avec des données simples, stockées dans un dataframe. L'objectif est de vous présenter les techniques de représentation disponibles, pas nécessairement d'effectuer une analyse intéressante et poussée des données."

- Class: cmd_question
  Output: "Affichez la page de documentation de cars."
  CorrectAnswer: ?cars
  AnswerTests: any_of_exprs('?cars', 'help(cars)', 'help("cars")')
  Hint: "Tapez ?cars ou help(cars) pour afficher la page de documentation des données cars. "

- Class: text
  Output: "Comme vous pouvez le voir, les données cars n'ont que deux variables: speed et stopping distance (vitesse et distance d'arrêt). Vous remarquerez que les données datent des années 20 (1920)."

- Class: cmd_question
  Output: "Affichez les premieres lignes des données."
  CorrectAnswer: head(cars)
  AnswerTests: omnitest(correctExpr='head(cars)')
  Hint: "Un trou de mémoire? utilisez la fonction head pour affichez les 6 premières lignes."

- Class: text
  Output: "Avant d'afficher un graphique (en anglais on dit 'to plot') il est, comme pour tout début d'analyse (voir le cours Data_first_encounter)  il est recommandé de se renseigner un minimum sur nos données via les commandes  dim(), names(), head(), tail(), str() and summary().i Pour le moment, on va se contenter de str ou de summary. A vous."
  CorrectAnswer: summary(cars)
  AnswerTests: any_of_exprs('summary(cars)','str(cars)')
  Hint: "Tapez summary(cars) ou str(cars) pour afficher la page de documentation des données cars. "

- Class: cmd_question
  Output: "Ok, démarrons le vif du sujet: utilisez la commande plto() sur les données cars."
  CorrectAnswer: plot(cars)
  AnswerTests: omnitest(correctExpr='plot(cars)')
  Hint: "Tapez plot(cars) pour créer un graphique de cars."

- Class: text
  Output: "Comme toujours, R essaie toujours de vous donner quelque chose d'adapté en fonction des informations qu'on lui fourni. En premier lieu, R à analyser le format des données, un dataframe avec deux varaibles, il a donc 'supposé' que l'on voulait représenter une variable en fonction de la seconde."

- Class: text
  Output: "En second lieu, puisque nous n'avons pas indiqué d'étiquettes pour les axes, R à choisi d'utiliser les noms de colonnes. Ensuite, il a créer les graduations (ticks en anglais) en essayant de les faire correspondre à la fois aux données tout en étant simple à lire (il n'y a pas d'intérêt à avoir des graduations au dixième près...) Enfin, il utilise les arguments par défaut fournit par la commande plot()."

- Class: text
  Output: "Nous allons maintenant tenter d'eplxorer les possibilités offertes par plot. Retenez cependant que beaucoup des sujets abordés s'appliquent généralement aussi aux autres fonctions de représentation. Tout d'abord, notez que 'plot' vient de scatterplot (nuage de points en français)."

- Class: cmd_question
  Output: "Regardez la page de documentation de la fonction plot."
  CorrectAnswer: ?plot
  AnswerTests: any_of_exprs('?plot', 'help(plot)')
  Hint: "Tapez ?plot ou help(plot) pour afficher la documentation de la fonction."

- Class: text
  Output: "La page de documentation met en avant les différents arguments que la fonction peut prendre. les deux plus important, en toute logiques, sont x et y, les variables que nous allons observer. Pour les prochaines questions, nommez explicitement les arguments utilisés dans votre réponse. Ainsi, ne tapez pas plot(cars$speed, cars$dist), même si cela marcherait, mais tapez plutôt plot(x = cars$speed, y = cars$dist)."

- Class: cmd_question
  Output: "Utilisez plot() pour afficher la vitesse sur l'axe des abscisses (x) et la distance sur l'axe des ordonnées (Y). N'oubliez pas de préciser explicitement les arguments fournis."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist)
  AnswerTests: omnitest(correctExpr='plot(x = cars$speed, y = cars$dist)')
  Hint: "Tapez plot(x = cars$speed, y = cars$dist) pour créer le graphique."

- Class: text
  Output: "Remarqez que cela produit un graphique léèrement différent que celui obtenu par la commande plot(cars). Dans ce cas, R n'est pas sûr de ce que l'on veut utiliser comme étiquettes d'axe, donc il prend le nom de la variable à la place, dataframe et $ inclus."

- Class: text
  Output: "Dans R, il y a régulièrement deux méthodes d'utilisation des fonctions qui sont utilisables: la convention 'formula' et la convention 'S3'. La méthode S3 est celle utilisée auparavant, où l'on fournit une variable x et une variable y. La convention formula quant à elle utilise une écriture tirée des mathématiques, sous la forme Y en fonction de  X, qui se code y ~ x (et on indique les données dont sont tirés x et y avec l'argument data), mais nous l'utiliserons un peu plus tard dans le cours."

- Class: cmd_question
  Output: "Utilisez la commande plot() pour aficher la distance sur l'axe des abscisses et la vitesse sur les ordonnées (inversion du graphique précédent)."
  CorrectAnswer: plot(x = cars$dist, y = cars$speed)
  AnswerTests: omnitest(correctExpr='plot(x = cars$dist, y = cars$speed)')
  Hint: "Tapez plot(x = cars$dist, y = cars$speed) pour créer le graphique"

- Class: text
  Output: "Il est probablement plus logique que la vitesse soit représentée en abscisse puisque la distance d'arrêt est, en toute logique, dépendante de la vitesse (en tout cas l'inverse serait pour le moins étonnant). Pour la suite, nous conserverons cette affectation."

- Class: text
  Output: "Par conséquent, on peut d'ores et déjà affirmer que les réponses aux prochaines questions seront sous la forme plot(x = cars$speed, y = cars$dist, ...) et que ce sont les trois-points qui seront modifiés (nouveaux arguments fournis pour modifier le graphique)."

- Class: cmd_question
  Output: "Recréez ce graphique en définissant l'étiquette des abscisses à la valeur 'Speed')."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = 'Speed')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, xlab = 'Speed')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, xlab = 'Speed') pour créer le graphqiue."

- Class: cmd_question
  Output: "Recréez un graphqiue avec l'étiquette 'Stopping Distance' sur l'axe des ordonnées. (sans étiquette en abscisse)."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, ylab = 'Stopping Distance') pour créer le graphique."

- Class: cmd_question
  Output: "Recréez ce graphique avec, cette fois-ci, les deux étiquettes 'Speed' et 'Stopping Distance'."
  CorrectAnswer: plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')
  AnswerTests: omnitest(correctExpr="plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')")
  Hint: "Tapez plot(x = cars$speed, y = cars$dist, xlab = 'Speed', ylab = 'Stopping Distance')."

- Class: text
  Output: "La raison pour laquelle l'appel plot(cars) au début du cours a fonctionné est que R est suffisamment 'intelligent' pour savoir que la première colonne est à affecter à l'abscisse, et la seconde à l'ordonnée (il respecte l'ordre des arguments fournis dans la définition de la fonction). Dans la suite, nous utiliserons la commande plot(cars, ...) en faisant varier les arguments."

- Class: text
  Output: "Pour chaque question, nous utiliserons les arguments un à un mais dans une application réelle ils sont evidemment cumulables."

- Class: cmd_question
  Output: "Affichez cars avec un titre principal défini à 'My Plot'. Remarquez que l'argument s'appelle 'main' et non pas 'title'."
  CorrectAnswer: plot(cars, main = 'My Plot')
  AnswerTests: omnitest(correctExpr="plot(cars, main = 'My Plot')")
  Hint: "Tapez plot(cars, main = 'My Plot') pour recréer le graphique."

- Class: cmd_question
  Output: "Affichez le graphqiue de cars avec un sous-titre 'My Plot Subtitle'."
  CorrectAnswer: plot(cars, sub = 'My Plot Subtitle')
  AnswerTests: omnitest(correctExpr="plot(cars, sub = 'My Plot Subtitle')")
  Hint: "Tapez plot(cars, sub = 'My Plot Subtitle') pour créer le graphique."

- Class: text
  Output: The plot help page (?plot) only covers a small number of the many arguments that can be passed in to plot() and to other graphical functions. To begin to explore the many other options, look at ?par. Let's look at some of the more commonly used ones. Continue using plot(cars, ...) as the base answer to these questions.

- Class: cmd_question
  Output: Plot cars so that the plotted points are colored red. (Use col = 2 to achieve this effect.)
  CorrectAnswer: plot(cars, col = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, col = 2)')
  Hint: Type plot(cars, col = 2) to create the plot.

- Class: cmd_question
  Output: Plot cars while limiting the x-axis to 10 through 15.  (Use xlim = c(10, 15) to achieve this effect.)
  CorrectAnswer: plot(cars, xlim = c(10, 15))
  AnswerTests: omnitest(correctExpr='plot(cars, xlim = c(10, 15))')
  Hint: Type plot(cars, xlim = c(10, 15)) to create the plot.

- Class: text
  Output: You can also change the shape of the symbols in the plot. The help page for points (?points) provides the details.

- Class: cmd_question
  Output: Plot cars using triangles.  (Use pch = 2 to achieve this effect.)
  CorrectAnswer: plot(cars, pch = 2)
  AnswerTests: omnitest(correctExpr='plot(cars, pch = 2)')
  Hint: Type plot(cars, pch = 2) to create the plot.

- Class: text
  Output: Arguments like "col" and "pch" may not seem very intuitive. And that is because they aren't! So, many/most people use more modern packages, like ggplot2, for creating their graphics in R.

- Class: text
  Output: It is, however, useful to have an introduction to base graphics because many of the idioms in lattice and ggplot2 are modeled on them.

- Class: text
  Output: Let's now look at some other functions in base graphics that may be useful, starting with boxplots.

- Class: cmd_question
  Output: Load the mtcars data frame.
  CorrectAnswer: data(mtcars)
  AnswerTests: omnitest(correctExpr='data(mtcars)')
  Hint: Type data(mtcars) to load the data.

- Class: text
  Output: Anytime that you load up a new data frame, you should explore it before using it. In the middle of a swirl lesson, just type play(). This temporarily suspends the lesson (without losing the work you have already done) and allows you to issue commands like dim(mtcars) and head(mtcars). Once you are done examining the data, just type nxt() and the lesson will pick up where it left off.

- Class: cmd_question
  Output: Look up the help page for boxplot().
  CorrectAnswer: ?boxplot
  AnswerTests: any_of_exprs('?boxplot', 'help(boxplot)')
  Hint: Type ?boxplot or help(boxplot) to view a help page with details about boxplot.

- Class: text
  Output: Instead of adding data columns directly as input arguments, as we did with plot(), it is often handy to pass in the entire data frame. This is what the "data" argument in boxplot() allows.

- Class: text
  Output: boxplot(), like many R functions, also takes a "formula" argument, generally an expression with a tilde ("~") which indicates the relationship between the input variables. This allows you to enter something like mpg ~ cyl to plot the relationship between cyl (number of cylinders) on the x-axis and mpg (miles per gallon) on the y-axis.

- Class: cmd_question
  Output: Use boxplot() with formula = mpg ~ cyl and data = mtcars to create a box plot.
  CorrectAnswer: boxplot(formula = mpg ~ cyl, data = mtcars)
  AnswerTests: omnitest(correctExpr='boxplot(formula = mpg ~ cyl, data = mtcars)')
  Hint: Type boxplot(formula = mpg ~ cyl, data = mtcars) to create the plot.

- Class: text
  Output: The plot shows that mpg is much lower for cars with more cylinders. Note that we can use the same set of arguments that we explored with plot() above to add axis labels, titles and so on.

- Class: text
  Output: When looking at a single variable, histograms are a useful tool. hist() is the associated R function. Like plot(), hist() is best used by just passing in a single vector.

- Class: cmd_question
  Output: Use hist() with the vector mtcars$mpg to create a histogram.
  CorrectAnswer: hist(mtcars$mpg)
  AnswerTests: any_of_exprs('hist(mtcars$mpg)', 'hist(x = mtcars$mpg)')
  Hint: Type hist(mtcars$mpg) to create the plot.

# Not sure what a good lesson length is for this.
# Might add some information on saving plots.
# Other functions that I use include identify().

- Class: text
  Output: In this lesson, you learned how to work with base graphics in R. The best place to go from here is to study the ggplot2 package. If you want to explore other elements of base graphics, then this web page (http://www.ling.upenn.edu/~joseff/rstudy/week4.html) provides a useful overview.
